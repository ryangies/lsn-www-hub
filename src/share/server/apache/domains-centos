#!/bin/bash
#
# httpd        Startup script for multiple Apache servers
#
# chkconfig: - 85 15
# description: Web server
# processname: httpd

vhost_name=$(basename $0)

# If this script was called as /etc/init.d/domains then it acts as a master
# for all domains.
if [ "$vhost_name" == "domains" ]; then
  [#:for (host) in "hosts/{?disabled(ne):1}"]
  [#:if host/vhosts && !host/forward-to-domain]
  [ -e /etc/livesite/init.d/[#host/domain] ] && /etc/livesite/init.d/[#host/domain] $@
  [#:end if]
  [#:end for]
  exit 0
fi

# Otherwise, the file-name of the script is the domain name (by convention)
vhost_dir='[#dir-vhost-root]'
vhost_opts_fn="$vhost_dir/$vhost_name/config/apache.opts"
daemon_opts_fn="$vhost_dir/$vhost_name/config/daemon.opts"
vhost_conf_path="$vhost_dir/$vhost_name/config/apache.conf"

# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/httpd ]; then
  . /etc/sysconfig/httpd
fi

# Start httpd in the C locale by default.
HTTPD_LANG=${HTTPD_LANG-"C"}

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server
# with the thread-based "worker" MPM; BE WARNED that some modules may not
# work correctly with a thread-based MPM; notably PHP will refuse to start.

# Path to the apachectl script, server binary, and short-form for messages.
apachectl=/usr/sbin/apachectl
httpd=${HTTPD-/usr/sbin/httpd}
prog=$vhost_name
piddir=$vhost_dir/$vhost_name/run

if [ ! -d "$vhost_dir/$vhost_name" ]; then
  failure "Requirements test"
  echo 1>&2 "Missing domain directory: $vhost_dir/$vhost_name"
  exit 1
fi

if [ ! -d "$piddir" ]; then
  mkdir -p $piddir
  lsn-server-config chown $domain
fi

pidfile=$piddir/httpd.pid
lockfile=/var/lock/subsys/$vhost_name
if [ -f "$vhost_opts_fn" ]; then
  vhost_opts=`cat $vhost_opts_fn`
  OPTIONS="$OPTIONS $vhost_opts"
fi
if [ -f "$daemon_opts_fn" ]; then
  DAEMON_OPTIONS=`cat $daemon_opts_fn`
fi
DAEMON_OPTIONS="$DAEMON_OPTIONS --pidfile=${pidfile}"
OPTIONS="$OPTIONS -f $vhost_conf_path"

RETVAL=0

# check for 1.3 configuration
check13 () {
	GONE="(ServerType|BindAddress|Port|AddModule|ClearModuleList|"
	GONE="${GONE}AgentLog|RefererLog|RefererIgnore|FancyIndexing|"
	GONE="${GONE}AccessConfig|ResourceConfig)"
	if LANG=C grep -Eiq "^[[:space:]]*($GONE)" $vhost_conf_path; then
		echo
		echo 1>&2 " Apache 1.3 configuration directives found"
		echo 1>&2 " please read /usr/share/doc/httpd-2.2.3/migration.html"
		failure "Apache 1.3 config directives test"
		echo
		exit 1
	fi
}

# The semantics of these two functions differ from the way apachectl does
# things -- attempting to start while running is a failure, and shutdown
# when not running is also a failure.  So we just do it the way init scripts
# are expected to behave here.
start() {
        echo -n $"Starting $prog: "
        check13 || exit 1
        LANG=$HTTPD_LANG daemon $DAEMON_OPTIONS $httpd $OPTIONS
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}
        return $RETVAL
}

# When stopping httpd a delay of >10 second is required before SIGKILLing the
# httpd parent; this gives enough time for the httpd parent to SIGKILL any
# errant children.
stop() {
	echo -n $"Stopping $prog: "
	killproc -p ${pidfile} -d 10 $httpd
	RETVAL=$?
	echo
	[ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}
reload() {
    echo -n $"Reloading $prog: "
    if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then
        RETVAL=$?
        echo $"not reloading due to configuration syntax error"
        failure $"not reloading $httpd due to configuration syntax error"
    else
        killproc -p ${pidfile} $httpd -HUP
        RETVAL=$?
    fi
    echo
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
        status -p ${pidfile} $httpd
	RETVAL=$?
	;;
  restart)
	stop
	start
	;;
  condrestart)
	if [ -f ${pidfile} ] ; then
		stop
		start
	fi
	;;
  reload)
        reload
	;;
  graceful|help|configtest|fullstatus)
	$apachectl $@
	RETVAL=$?
	;;
  *)
	echo $"Usage: $prog {start|stop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}"
	exit 1
esac

exit $RETVAL
