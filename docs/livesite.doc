# HashFile 2.1
defs => @{
  %{
    props => %{
    }
    content => @{
    }
    name => js
    type => global
    id => js
    depth => 1
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Package definition and extension manager for ECMA scripts. This 
      }
      @{
        *
        implementation considers each package to be an instantiable component
      }
      @{
        *
        that is provided a pointer back to the library instance for which it is 
      }
      @{
        *
        being created.  The intentions are to:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        1. Provide management which enables one to division their code into logical
      }
      @{
        *
        packages and avoid clobbering global variables.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        2. Scope the C<window> and C<document> objects such that one may instantiate
      }
      @{
        *
        the library to act upon a child window, i.e., an IFRAME, without changing
      }
      @{
        *
        its dependencies nor incurring the cost of additional HTTP connections to
      }
      @{
        *
        script files.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Packages may contain local private variables, classes, and functions. 
      }
      @{
        *
        Namespaces are extendable, allowing the end product to avoid naming 
      }
      @{
        *
        collisions. Each library instance may operate upon separate window and 
      }
      @{
        *
        document objects.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The ECMAScript package contains minimal code, just enough to provide:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        1. A method for creating and extending namespaces with your own packages:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 L<ECMAScript.Extend>('namespace', package);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        2. A way to create new library instances which act upon target windows and 
      }
      @{
        *
        their documents:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var js = new L<ECMAScript.Class>(window, document);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ECMAScript does not implement any namespaces itself and can be used to build
      }
      @{
        *
        a library from the ground up.
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => ECMAScript
    type => class
    id => js.ECMAScript
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        About message is a semi-colon delimited string of informational fields,
      }
      @{
        *
        which take the form:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 <name>;<version>;<packages>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 <name>        Common name for this library
        }
      }
      @{
        *
        ${
 <version>     Numeric version to three decimal places
        }
      }
      @{
        *
        ${
 <packages>    Comma-delimited string of package namespaces
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example output:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ECMAScript;0.004;lang,util,crypt,console,data,http,dom
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => About
    type => function
    id => js.ECMAScript.About
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Construct a new library instance.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param window   <HTMLWindowElement>   Only requried/used with HTML-DOM JavaScript
        }
      }
      @{
        *
        ${
 @param document <HTMLDocumentElement> Only requried/used with HTML-DOM JavaScript
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var js = new ECMAScript.Class(window, document);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => ECMAScript.Class
    type => class
    id => js.ECMAScript.Class
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Either create or extend this instance with the given package constructor.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 this.extend(ns, func);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ns    namespace
        }
      }
      @{
        *
        ${
 func  package constructor function
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => extend
    type => function
    id => js.ECMAScript.Class.extend
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Extend (or define) a top-level ECMAScript namespace, i.e., extend the
      }
      @{
        *
        library by either adding to or creating a package.  Extensions will be
      }
      @{
        *
        applied to all running instance, allowing one load additional packages
      }
      @{
        *
        on demand.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param namespace    <String>    e.g., 'util', 'com', 'org.gnu'
        }
      }
      @{
        *
        ${
 @param constructor  <Function>  See "Package Constructor Function" below
        }
      }
      @{
        *
        ${

        }
      }
      @{
        =
        ${
 ECMAScript.Extend('util', function (ecma) {         // namespace 'util'
        }
      }
      @{
        =
        ${
  
        }
      }
      @{
        =
        ${
   this.say = function (message) {                   // public function
        }
      }
      @{
        =
        ${
     alert(message);
        }
      }
      @{
        =
        ${
   \}
        }
      }
      @{
        =
        ${

        }
      }
      @{
        =
        ${
 \});
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The code above specifies the namespace 'util' which is extended (or 
      }
      @{
        *
        defined if it has not been). This function is now available as:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 js.util.say('Hello World');
        }
      }
      @{
        *
        ${

        }
      }
      @{
        \#
        Package Constructor Function
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The package constructor function is passed a reference to the library 
      }
      @{
        *
        instance L<ECMAScript.Class> which is creating it.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Rather than using function prototypes, the package constructor function
      }
      @{
        *
        defines its methods in the function body.  This creates closures which
      }
      @{
        *
        brings the current ECMAScript library instance (arguments[0]) in to scope
      }
      @{
        *
        and also allows the package to have private member variables.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ECMAScript.Extend('util', function (ecma) {
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   var _err = "Message is undefined";                // private var
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   this.say = function (message) {
        }
      }
      @{
        *
        ${
     if (!message) {
        }
      }
      @{
        =
        ${
       ecma.console.log(_err);                       // ecma is used
        }
      }
      @{
        *
        ${
     \} else {
        }
      }
      @{
        *
        ${
       alert(message);
        }
      }
      @{
        *
        ${
     \}
        }
      }
      @{
        *
        ${
   \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 \});
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This constructor pattern is necessary for scoping, i.e., allowing access to the
      }
      @{
        *
        current ECMAScript library instance.  Creating these closures does not 
      }
      @{
        *
        create a critical memory hole because these are singleton packages in
      }
      @{
        *
        respect to the number of running documents.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Extend
    type => function
    id => js.ECMAScript.Extend
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ResizeRule
    type => class
    id => js.ResizeRule
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => action
    type => namespace
    id => js.action
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Base class for classes which wish to implement action callbacks.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function MyClass () {
        }
      }
      @{
        *
        ${
   ecma.action.ActionDispatcher.apply(this);
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
 var proto = ecma.lang.createMethods(ecma.action.ActionDispatcher);
        }
      }
      @{
        *
        ${
 MyClass.prototype = proto;
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => ActionDispatcher
    type => class
    id => js.action.ActionDispatcher
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Add add a callback for the given action name.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 object.addActionListener(name, listener);
        }
      }
      @{
        *
        ${
 object.addActionListener(name, listener, scope);
        }
      }
      @{
        *
        ${
 object.addActionListener(name, listener, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 name        <String>    Name of the action
        }
      }
      @{
        *
        ${
 listener    <Function>  Callback function
        }
      }
      @{
        *
        ${
 scope       <Object>    Callback scope
        }
      }
      @{
        *
        ${
 args        <Array>     Callback arguments L<1>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> The provided arguments are concatenated B<after> any arguments
      }
      @{
        *
        provided by the code which invokes the event.
      }
      @{
        ${

        }
      }
    }
    name => addActionListener
    type => function
    id => js.action.ActionDispatcher.addActionListener
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Invoke the given action synchronously.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 this.dispatchAction(name);
        }
      }
      @{
        *
        ${
 this.dispatchAction(name, arg1...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The difference between L<.dispatchAction> and L<.executeAction> is that
      }
      @{
        *
        L<.dispatchAction> will apply each listener callback in a separate thread,
      }
      @{
        *
        allowing the current thread to continue.  While this is ideal in most
      }
      @{
        *
        situations, time-critical routines will prefer L<.executeAction>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => dispatchAction
    type => function
    id => js.action.ActionDispatcher.dispatchAction
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ${
 dispatchClassAction('onClick', ...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        * Calls this instances C<onClick> method (case sensitive)
      }
      @{
        *
        * Then executes the action listeners (not case sensitive)
      }
      @{
        *
        * Only action listeners receive the C<ActionEvent> as their first-argument.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => dispatchClassAction
    type => function
    id => js.action.ActionDispatcher.dispatchClassAction
    depth => 4
  }
  %{
    props => %{
      see => @{
        L<.dispatchAction>
      }
    }
    content => @{
      @{
        *
        Invoke the given action synchronously.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 this.executeAction(name);
        }
      }
      @{
        *
        ${
 this.executeAction(name, arg1...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 L<.dispatchAction>
        }
      }
      @{
        ${
 MyClass.prototype = proto;
        }
        ${

        }
      }
    }
    name => executeAction
    type => function
    id => js.action.ActionDispatcher.executeAction
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ${
 executeClassAction('onClick', ...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        * Calls this instances C<onClick> method (case sensitive)
      }
      @{
        *
        * Then executes the action listeners (not case sensitive)
      }
      @{
        *
        * Only action listeners receive the C<ActionEvent> as their first-argument.
      }
      @{
        ${

        }
      }
    }
    name => executeClassAction
    type => function
    id => js.action.ActionDispatcher.executeClassAction
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Used to allow fuzzy action names, e.g., C<'onComplete' == 'complete'>.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var name1 = object.normalizeActionName('onComplete');
        }
      }
      @{
        *
        ${
 var name2 = object.normalizeActionName('complete');
        }
      }
      @{
        *
        ${
 ecma.lang.assert(name1 == name2);
        }
      }
      @{
        The difference between L<.dispatchAction> and L<.executeAction> is that
        ${

        }
      }
    }
    name => normalizeActionName
    type => function
    id => js.action.ActionDispatcher.normalizeActionName
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove an action listener.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 object.removeActionListener(name, listener);
        }
      }
      @{
        *
        ${
 object.removeActionListener(name, listener, scope);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 name        <String>    Name of the action
        }
      }
      @{
        *
        ${
 listener    <Function>  Callback function
        }
      }
      @{
        *
        ${
 scope       <Object>    Callback scope
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        All arguments must be the same as provided to the L<.addActionListener>
      }
      @{
        *
        function.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeActionListener
    type => function
    id => js.action.ActionDispatcher.removeActionListener
    depth => 4
  }
  %{
    props => %{
      param => @{
        name        <String>                        The normalized name of the action.
        dispatcher  <ecma.action.ActionDispatcher>  The invoking dispatcher object.
      }
    }
    content => @{
      @{
        *
        Event object for ActionListener dispatched events.
      }
      @{
        *
        ${
 name        <String>                        The normalized name of the action.
        }
      }
      @{
        *
        ${
 dispatcher  <ecma.action.ActionDispatcher>  The invoking dispatcher object.
        }
      }
      @{
        ${
 var name2 = object.normalizeActionName('complete');
        }
        ${

        }
      }
    }
    name => ActionEvent
    type => class
    id => js.action.ActionEvent
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Represents a listener which has been added to an L<ecma.action.ActionDispatcher>
      }
      @{
        ${

        }
      }
    }
    name => ActionListener
    type => class
    id => js.action.ActionListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Execute this listener.
      }
      @{
        ${
 name        <String>                        The normalized name of the action.
        }
        ${

        }
      }
    }
    name => invoke
    type => function
    id => js.action.ActionListener.invoke
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Handle exceptions which occur while invoking this listener.  One fatal
      }
      @{
        *
        exception is when the listener function as been freed.  Either way, we
      }
      @{
        *
        will remove ourselves from the dispatcher.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param ex <Error> the exception
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => onException
    type => function
    id => js.action.ActionListener.onException
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove this listener from its dispatcher.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => remove
    type => function
    id => js.action.ActionListener.remove
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Spawn a new thread which invokes this listener.
      }
      @{
        exception is when the listener function as been freed.  Either way, we
        ${

        }
      }
    }
    name => spawn
    type => function
    id => js.action.ActionListener.spawn
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Access to the client's console.  When no console is present calls are
      }
      @{
        *
        silently ignored.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => console
    type => namespace
    id => js.console
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Opera
    type => class
    id => js.console.Opera
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Passed to all consoles
      }
      @{
        silently ignored.
        ${

        }
      }
    }
    name => dir
    type => function
    id => js.console.dir
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Passed to all consoles
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => error
    type => function
    id => js.console.error
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Output all log-history items.
      }
      @{
        ${

        }
      }
    }
    name => flush
    type => function
    id => js.console.flush
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Passed to all consoles
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => info
    type => function
    id => js.console.info
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Log a message to all consoles
      }
      @{
        ${
 var array = ecma.console.history();
        }
        ${

        }
      }
    }
    name => log
    type => function
    id => js.console.log
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Add an output console to the stack. Output consoles are objects which
      }
      @{
        *
        have C<log> and C<trace> methods.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => tee
    type => function
    id => js.console.tee
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Log a trace message to all consoles
      }
      @{
        have C<log> and C<trace> methods.
        ${

        }
      }
    }
    name => trace
    type => function
    id => js.console.trace
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Passed to all consoles
      }
      @{
        ${

        }
      }
    }
    name => warn
    type => function
    id => js.console.warn
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        \#
        Secure Hash Algorithms
      }
      @{
        *
        ${

        }
      }
      @{
        *
        A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
      }
      @{
        *
        in FIPS PUB 180-1
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 Version 2.1a Copyright Paul Johnston 2000 - 2002.
        }
      }
      @{
        *
        ${
 Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
        }
      }
      @{
        *
        ${
 Distributed under the BSD License
        }
      }
      @{
        *
        ${
 See L<http://pajhome.org.uk/crypt/md5> for details.
        }
      }
      @{
        *
        ${

        }
      }
    }
    name => crypt
    type => namespace
    id => js.crypt
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => b64_hmac_sha1
    type => function
    id => js.crypt.b64_hmac_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => b64_sha1
    type => function
    id => js.crypt.b64_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => hex_hmac_sha1
    type => function
    id => js.crypt.hex_hmac_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => hex_sha1
    type => function
    id => js.crypt.hex_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => str_hmac_sha1
    type => function
    id => js.crypt.str_hmac_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => str_sha1
    type => function
    id => js.crypt.str_sha1
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => data
    type => namespace
    id => js.data
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Wrapper class for JavaScript Arrays which extends L<ecma.data.Container>.
      }
      @{
        *
        ${
 var object = new ecma.data.Array();
        }
      }
      @{
        *
        ${
 var object = new ecma.data.Array('alpha', 'bravo');
        }
      }
      @{
        *
        TODO Create methods: C<shift, unshift>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Array
    type => class
    id => js.data.Array
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove all items.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => clear
    type => function
    id => js.data.Array.clear
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get a value by its index.
      }
      @{
        *
        ${
 var unknown = array.getValue(0);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getValue
    type => function
    id => js.data.Array.getValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Iterate the array, applying a callback function with each item.
      }
      @{
        *
        ${
 array.iterate(function (index, value) { ... });
        }
      }
      @{
        *
        ${
 array.iterate(function (index, value) { ... }, scope);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => iterate
    type => function
    id => js.data.Array.iterate
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get an array of this array's indexes.
      }
      @{
        *
        ${
 var array = array.keys();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => keys
    type => function
    id => js.data.Array.keys
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Push a value on to the end of the array.
      }
      @{
        *
        ${
 array.push('bravo');
        }
      }
      @{
        *
        Returns the value pushed on to the array.
      }
      @{
        ${

        }
      }
    }
    name => push
    type => function
    id => js.data.Array.push
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove a value from the array by its index.
      }
      @{
        *
        ${
 array.removeValue(0);
        }
      }
      @{
        *
        Returns the value removed from the array.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeValue
    type => function
    id => js.data.Array.removeValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set a value by its index.
      }
      @{
        *
        ${
 array.setValue(0, 'alpha');
        }
      }
      @{
        ${

        }
      }
    }
    name => setValue
    type => function
    id => js.data.Array.setValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a transfer-encoded string representing this array.
      }
      @{
        *
        ${
 var string = array.toXFR();
        }
      }
      @{
        ${

        }
      }
    }
    name => toXFR
    type => function
    id => js.data.Array.toXFR
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get an array of this array's values.
      }
      @{
        *
        ${
 var array = array.values();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => values
    type => function
    id => js.data.Array.values
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => CNodeLayer
    type => class
    id => js.data.CNodeLayer
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onAdopt
    type => function
    id => js.data.CNodeLayer.onAdopt
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onOrphan
    type => function
    id => js.data.CNodeLayer.onOrphan
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onReorder
    type => function
    id => js.data.CNodeLayer.onReorder
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively iterate into each node applying the callback function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 node.walk(function);
        }
      }
      @{
        *
        ${
 node.walk(function, scope);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The callback function is passed one parameter
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 node    The current node
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => walk
    type => function
    id => js.data.CNodeLayer.walk
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Base class for L<ecma.data.Array> and L<ecma.data.HashList>.
      }
      @{
        ${
 container.remove('/alpha/bravo');
        }
        ${

        }
      }
    }
    name => Container
    type => class
    id => js.data.Container
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Clear contents
      }
      @{
        ${
 container.setValue('alpha', {});
        }
        ${

        }
      }
    }
    name => clear
    type => function
    id => js.data.Container.clear
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get a value by its address.
      }
      @{
        *
        ${
 var value = container.get('alpha');
        }
      }
      @{
        *
        ${
 var value = container.get('alpha/bravo');
        }
      }
      @{
        *
        ${
 var value = container.get('alpha/bravo/0');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => get
    type => function
    id => js.data.Container.get
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the object representation of this or the specified child.
      }
      @{
        *
        ${
 var object = container.getObject();
        }
      }
      @{
        *
        ${
 var object = container.getObject('/alpha/bravo');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getObject
    type => function
    id => js.data.Container.getObject
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the string representation of this or the specified child.
      }
      @{
        *
        ${
 var string = container.getString();
        }
      }
      @{
        *
        ${
 var string = container.getString('/alpha/bravo');
        }
      }
      @{
        ${
 container.walk(function, scope);
        }
        ${

        }
      }
    }
    name => getString
    type => function
    id => js.data.Container.getString
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove a value by its address.
      }
      @{
        *
        ${
 container.remove('/alpha/bravo');
        }
      }
      @{
        ${
 var hash = new ecma.data.HashList('key1', 'val1', 'key2', 'val2');
        }
        ${

        }
      }
    }
    name => remove
    type => function
    id => js.data.Container.remove
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set a value at the given address.
      }
      @{
        *
        ${
 container.setValue('alpha', {});
        }
      }
      @{
        *
        ${
 container.setValue('alpha/bravo', []);
        }
      }
      @{
        *
        ${
 container.setValue('alpha/bravo/0', 'charlie');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => set
    type => function
    id => js.data.Container.set
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a (normal) JavaScript Object from this container.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var Array = container.toObject();   // when it is an ecma.data.Array
        }
      }
      @{
        *
        ${
 var Object = container.toObject();  // when it is an ecma.data.HashList
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => toObject
    type => function
    id => js.data.Container.toObject
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a transfer-encoded string which represents the data.
      }
      @{
        *
        ${
 var string = container.toXFR();
        }
      }
      @{
        Note, the internal array is returned, so any modification to it will affect
        ${

        }
      }
    }
    name => toXFR
    type => function
    id => js.data.Container.toXFR
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively iterate the container applying a callback with each item.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 container.walk(function);
        }
      }
      @{
        *
        ${
 container.walk(function, scope);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The callback function is passed four parameters
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 key     The current key
        }
      }
      @{
        *
        ${
 value   The current value
        }
      }
      @{
        *
        ${
 depth   Integer index indicating how deep we have recursed
        }
      }
      @{
        *
        ${
 addr    The address of the current value
        }
      }
      @{
        *
        ${
 pv      The pv of the current value
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 container.walk(function (key, value, depth, addr, pv) {
        }
      }
      @{
        *
        ${
 \});
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => walk
    type => function
    id => js.data.Container.walk
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Object where members are kept in fifo order.
      }
      @{
        *
        ${
 var hash = new ecma.data.HashList();
        }
      }
      @{
        *
        ${
 var hash = new ecma.data.HashList('key1', 'val1', 'key2', 'val2');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => HashList
    type => class
    id => js.data.HashList
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get a value by its key.
      }
      @{
        *
        ${
 var unknown = hash.getValue('key1');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getValue
    type => function
    id => js.data.HashList.getValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Iterate the hash, applying a callback function with each item.
      }
      @{
        *
        ${
 hash.iterate(function (key, value) { ... });
        }
      }
      @{
        *
        ${
 hash.iterate(function (key, value) { ... }, scope);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => iterate
    type => function
    id => js.data.HashList.iterate
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the array of the keys keys used in this hash.
      }
      @{
        *
        ${
 var array = hash.keys();
        }
      }
      @{
        *
        Note, the internal array is returned, so any modification to it will affect
      }
      @{
        *
        the hash itself.
      }
      @{
        ${

        }
      }
    }
    name => keys
    type => function
    id => js.data.HashList.keys
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove an item from the hash by its key.
      }
      @{
        *
        ${
 var unknown = hash.removeValue('key1');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeValue
    type => function
    id => js.data.HashList.removeValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set a value by its key.
      }
      @{
        *
        ${
 var unknown = hash.setValue('key1', 'val1');
        }
      }
      @{
        ${
 var appendedNode = node.appendChild(data);
        }
        ${

        }
      }
    }
    name => setValue
    type => function
    id => js.data.HashList.setValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a transfer-encoded string representing this hash.
      }
      @{
        *
        ${
 var string = hash.toXFR();
        }
      }
      @{
        See also L<appendChild>
        ${

        }
      }
    }
    name => toXFR
    type => function
    id => js.data.HashList.toXFR
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get an array of this hash's values.
      }
      @{
        *
        ${
 var array = hash.values();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => values
    type => function
    id => js.data.HashList.values
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        A data structure and wrapper with an interface akin to the HTML and XML DOM.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var node = new ecma.data.Node();
        }
      }
      @{
        *
        ${
 var node = new ecma.data.Node(data); // data may be any value type
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This class implements node insertion and removal, maintaining the child 
      }
      @{
        *
        and sibling member references.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var list = ecma.data.createNode();
        }
      }
      @{
        *
        ${
 list.appendChild('Alpha');
        }
      }
      @{
        *
        ${
 list.appendChild(3.14);
        }
      }
      @{
        *
        ${
 list.appendChild(false);
        }
      }
      @{
        *
        ${
 var node = list.firstChild;
        }
      }
      @{
        *
        ${
 while (node) {
        }
      }
      @{
        *
        ${
   ecma.console.log(node.index, node.data);
        }
      }
      @{
        *
        ${
   node = node.nextSibling;
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The above example will write the following output to the console:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 0 Alpha
        }
      }
      @{
        *
        ${
 1 3.14
        }
      }
      @{
        *
        ${
 2 false
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When child nodes are inserted they are first checked to see if they are
      }
      @{
        *
        already derived from L<ecma.data.Node>.  If not, they are considered
      }
      @{
        *
        data and passed to L<ecma.data.Node.createNode> for construction.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Nodes which are appended or inserted will be removed from their
      }
      @{
        *
        originating containers.  For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var l1 = ecma.data.Node();
        }
      }
      @{
        *
        ${
 var a = l1.appendChild('a');
        }
      }
      @{
        *
        ${
 var l2 = ecma.data.Node();
        }
      }
      @{
        *
        ${
 l2.appendChild(a);              // a will be removed from l1
        }
      }
      @{
        *
        ${

        }
      }
    }
    name => Node
    type => class
    id => js.data.Node
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => addLayer
    type => function
    id => js.data.Node.addLayer
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Adds a node to the end of the list of children of a specified parent 
      }
      @{
        *
        node.
      }
      @{
        *
        ${
 var appendedNode = node.appendChild(data);
        }
      }
      @{
        *
        ${
 var appendedNode = node.appendChild(newNode);
        }
      }
      @{
        *
        If the new node already exists it is removed from its parent node, then 
      }
      @{
        *
        added to the specified parent node.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => appendChild
    type => function
    id => js.data.Node.appendChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Appends multiple child nodes to this node.
      }
      @{
        *
        ${
 var appendedNodes = node.appendChildren([data1, data2, ...]);
        }
      }
      @{
        *
        See also L<appendChild>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => appendChildren
    type => function
    id => js.data.Node.appendChildren
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        All child nodes of this node.
      }
      @{
        *
        ${

        }
      }
    }
    name => childNodes
    type => member
    id => js.data.Node.childNodes
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Creates a new node for placement as a child of this node.
      }
      @{
        *
        ${
 var newNode = node.createNode();
        }
      }
      @{
        *
        ${
 var newNode = node.createNode(data);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createNode
    type => function
    id => js.data.Node.createNode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Gets/sets the data associated with this node.
      }
      @{
        *
        ${

        }
      }
    }
    name => data
    type => member
    id => js.data.Node.data
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The first direct child node of this node or C<null> if there are no child
      }
      @{
        *
        nodes.
      }
      @{
        *
        ${

        }
      }
    }
    name => firstChild
    type => member
    id => js.data.Node.firstChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an identifier unique to each instance
      }
      @{
        *
        Used internally however available for override.
      }
      @{
        ${

        }
      }
    }
    name => generateId
    type => function
    id => js.data.Node.generateId
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the number of ancestors for this node.
      }
      @{
        *
        ${
 var depth = node.getDepth();
        }
      }
      @{
        ${
 var insertedNode = parentNode.insertAfter(data, referenceNode)
        }
        ${

        }
      }
    }
    name => getDepth
    type => function
    id => js.data.Node.getDepth
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getLayer
    type => function
    id => js.data.Node.getLayer
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getParentLayer
    type => function
    id => js.data.Node.getParentLayer
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Checks for the existence of child nodes.
      }
      @{
        *
        ${
 var bool = node.hasChildNodes();
        }
      }
      @{
        See also L<insertChild>
        ${

        }
      }
    }
    name => hasChildNodes
    type => function
    id => js.data.Node.hasChildNodes
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The index of this node in the tree or C<null> if this is a not a child of 
      }
      @{
        *
        another node.
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => index
    type => member
    id => js.data.Node.index
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Inserts the specified node after a reference node as a child of the
      }
      @{
        *
        current node.
      }
      @{
        *
        ${
 var insertedNode = parentNode.insertAfter(data, referenceNode)
        }
      }
      @{
        *
        ${
 var insertedNode = parentNode.insertAfter(newNode, referenceNode)
        }
      }
      @{
        *
        If the newNode already exists it is removed from its parent node, then 
      }
      @{
        *
        inserted into the specified parent node.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => insertAfter
    type => function
    id => js.data.Node.insertAfter
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Inserts the specified node before a reference node as a child of the 
      }
      @{
        *
        current node. 
      }
      @{
        *
        ${
 var insertedNode = parentNode.insertBefore(data, referenceNode)
        }
      }
      @{
        *
        ${
 var insertedNode = parentNode.insertBefore(newNode, referenceNode)
        }
      }
      @{
        *
        If the newNode already exists it is removed from its parent node, then 
      }
      @{
        *
        inserted into the specified parent node.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => insertBefore
    type => function
    id => js.data.Node.insertBefore
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert a child according to this node's sort order.
      }
      @{
        is the first child.
        ${

        }
      }
    }
    name => insertChild
    type => function
    id => js.data.Node.insertChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert multiple child nodes to this node.
      }
      @{
        *
        ${
 var insertedNodes = node.insertChildren([data1, data2, ...]);
        }
      }
      @{
        *
        See also L<insertChild>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => insertChildren
    type => function
    id => js.data.Node.insertChildren
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Like L<walk> however not recursive.
      }
      @{
        ${
 removedNode = parentNode.removeChild(childNode);
        }
        ${

        }
      }
    }
    name => iterate
    type => function
    id => js.data.Node.iterate
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The last direct child node of this node or C<null> if there are no child
      }
      @{
        *
        nodes.
      }
      @{
        *
        ${

        }
      }
    }
    name => lastChild
    type => member
    id => js.data.Node.lastChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The node immediately following this node in the tree, or C<null> if this
      }
      @{
        *
        is the last child.
      }
      @{
        *
        ${

        }
      }
    }
    name => nextSibling
    type => member
    id => js.data.Node.nextSibling
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The parent node of this node or C<null> if this is a not a child of 
      }
      @{
        *
        another node.
      }
      @{
        *
        ${

        }
      }
    }
    name => parentNode
    type => member
    id => js.data.Node.parentNode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The node immediately preceding this node in the tree, or C<null> if this
      }
      @{
        *
        is the first child.
      }
      @{
        *
        ${

        }
      }
    }
    name => previousSibling
    type => member
    id => js.data.Node.previousSibling
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove all child nodes.
      }
      @{
        *
        ${
 parentNode = parentNode.removeAllChildren();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeAllChildren
    type => function
    id => js.data.Node.removeAllChildren
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Removes a child node.
      }
      @{
        *
        ${
 removedNode = parentNode.removeChild(childNode);
        }
      }
      @{
        ${
 node.walk(callback);
        }
        ${

        }
      }
    }
    name => removeChild
    type => function
    id => js.data.Node.removeChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeLayer
    type => function
    id => js.data.Node.removeLayer
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Replaces one child node of the specified parent node with another.
      }
      @{
        *
        ${
 replacedNode = parentNode.replaceChild(data, childNode);
        }
      }
      @{
        *
        ${
 replacedNode = parentNode.replaceChild(newNode, childNode);
        }
      }
      @{
        *
        If the newNode already exists it is removed from its parent node, then 
      }
      @{
        *
        inserted into the specified parent node.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => replaceChild
    type => function
    id => js.data.Node.replaceChild
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The root node of this hierarchy.
      }
      @{
        *
        ${

        }
      }
    }
    name => rootNode
    type => member
    id => js.data.Node.rootNode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => sort
    type => function
    id => js.data.Node.sort
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => sortCompare
    type => function
    id => js.data.Node.sortCompare
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => toString
    type => function
    id => js.data.Node.toString
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively iterate into each node applying the callback function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 node.walk(callback);
        }
      }
      @{
        *
        ${
 node.walk(function);
        }
      }
      @{
        *
        ${
 node.walk(function, scope);
        }
      }
      @{
        *
        ${
 node.walk(function, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The callback function's first argument is always:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 node        The current node
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        and can return:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 undefined   Keep walking
        }
      }
      @{
        *
        ${
 'continue;' Move on to the next sibling (returns undefined)
        }
      }
      @{
        *
        ${
 'break;'    Stop walking (returns undefined)
        }
      }
      @{
        *
        ${
 !undefined  Stop walking (returns said value)
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => walk
    type => function
    id => js.data.Node.walk
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Depricated (use L<ecma.data.HashList>)
      }
      @{
        ${

        }
      }
    }
    name => OrderedHash
    type => class
    id => js.data.OrderedHash
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ${
 var object = new ecma.data.Pool();
        }
      }
      @{
        ${

        }
      }
    }
    name => Pool
    type => class
    id => js.data.Pool
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ${
 pool.clear();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => clear - Remove all items from the pool
    type => function
    id => js.data.Pool.clear - Remove all items from the pool
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => get - Get an item from the pool
    type => function
    id => js.data.Pool.get - Get an item from the pool
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => XFR
    type => class
    id => js.data.XFR
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an object for the provided symbol.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createObject
    type => function
    id => js.data.XFR.createObject
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an object for the provided symbol.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createValue
    type => function
    id => js.data.XFR.createValue
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Decode a component (key or value)
      }
      @{
        entity is available for the character code, a Numeric Character Entity
        ${

        }
      }
    }
    name => decodeComponent
    type => function
    id => js.data.XFR.decodeComponent
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Encode a component (key or value)
      }
      @{
        ${

        }
      }
    }
    name => encodeComponent
    type => function
    id => js.data.XFR.encodeComponent
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a transfer-encoded string representing the object structure.
      }
      @{
        ${

        }
      }
    }
    name => format
    type => function
    id => js.data.XFR.format
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an object from a transfer-encoded string.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => parse
    type => function
    id => js.data.XFR.parse
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the class constructor for the provided symbol.
      }
      @{
        ${

        }
      }
    }
    name => symbolToClass
    type => function
    id => js.data.XFR.symbolToClass
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the extension portion of the address.
      }
      @{
        *
        ${
 var string = addr_ext('/alpha/bravo.charlie');
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 charlie
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addr_ext
    type => function
    id => js.data.addr_ext
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Join the array elements to create an address.
      }
      @{
        *
        ${
 var string = addr_join(['alpha', 'bravo']);
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 alpha/bravo
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addr_join
    type => function
    id => js.data.addr_join
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the name portion of the address.
      }
      @{
        *
        ${
 var string = addr_name('/alpha/bravo.charlie');
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 bravo.charlie
        }
      }
      @{
        ${

        }
      }
    }
    name => addr_name
    type => function
    id => js.data.addr_name
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Normalize the given address.
      }
      @{
        *
        ${
 var string = addr_normalize('/alpha//bravo/');
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 /alpha/bravo
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addr_normalize
    type => function
    id => js.data.addr_normalize
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the parent address of the address.
      }
      @{
        *
        ${
 var string = addr_parent('/alpha/bravo');
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 /alpha
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addr_parent
    type => function
    id => js.data.addr_parent
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Splits the given address into segments.
      }
      @{
        *
        ${
 var array = addr_split('/alpha/bravo');
        }
      }
      @{
        *
        The above example will return:
      }
      @{
        *
        ${
 ['alpha', 'bravo']
        }
      }
      @{
        ${

        }
      }
    }
    name => addr_split
    type => function
    id => js.data.addr_split
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => data.base64
    type => namespace
    id => js.data.base64
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        public method for decoding
      }
      @{
        to the descendants of the given element, for times when could be many
        ${

        }
      }
    }
    name => decode
    type => function
    id => js.data.base64.decode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        public method for encoding
      }
      @{
        ${

        }
      }
    }
    name => encode
    type => function
    id => js.data.base64.encode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => data.entities
    type => namespace
    id => js.data.entities
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Decode ISO88591 characters, producing HTML Named Entities.  If no named
      }
      @{
        *
        entity is available for the character code, a Numeric Character Entity
      }
      @{
        *
        is produced instead.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var str = emca.data.entities.decode(src);
        }
      }
      @{
        *
        ${
 var str = emca.data.entities.decode(src, bool);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 src   <String>  Source text to decode
        }
      }
      @{
        *
        ${
 bool  <Boolean> Also decode HTML markup characters (optional)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        In this example:
      }
      @{
        *
        ${
 var str = emca.data.entities.decode(“Hellagood”);
        }
      }
      @{
        *
        C<str> will be:
      }
      @{
        *
        ${
 &amp;ldquo;Hellagood&amp;rdquo;
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => decode
    type => function
    id => js.data.entities.decode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => encode
    type => function
    id => js.data.entities.encode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return a string representing each recursive value in an object
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var str = ecma.data.inspect(val);
        }
      }
      @{
        ${
 var css = new ecma.dom.StyleSheet(props);
        }
        ${

        }
      }
    }
    name => inspect
    type => function
    id => js.data.inspect
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => data.md5
    type => namespace
    id => js.data.md5
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => data.utf8
    type => namespace
    id => js.data.utf8
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => decode
    type => function
    id => js.data.utf8.decode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => encode
    type => function
    id => js.data.utf8.encode
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Adopted from:
      }
      @{
        *
        ${
 http://blog.stevenlevithan.com/archives/date-time-format
        }
      }
      @{
        ${
 ecma.dom.addEventListener(elem, listener);
        }
        ${

        }
      }
    }
    name => date
    type => namespace
    id => js.date
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return a formatted version of the given date.
      }
      @{
        *
        Taken from: L<http://blog.stevenlevithan.com/archives/date-time-format>
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var str = ecma.date.format(date, mask, utc);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param date <Date> Date to format (optional)
        }
      }
      @{
        *
        ${
 @param mask <String> The format string L<1>
        }
      }
      @{
        *
        ${
 @param utc <Boolean> Use UTC
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.date.format(date, 'm/dd/yy'); *  // B<6/09/07>
        }
      }
      @{
        *
        ${
 ecma.date.format(date, 'dddd, mmmm dS, yyyy, h:MM:ss TT'); // B<Saturday, June 9th, 2007, 5:46:21 PM>
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => format
    type => function
    id => js.date.format
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        A global instance of the library running under the context of the current 
      }
      @{
        *
        window and document:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var js = new L<ECMAScript.Class>(window, document);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        From the perspective of the code which B<uses> the library we refer to the
      }
      @{
        *
        running instance as C<js>.  The name C<js> is not set in stone, it is simply
      }
      @{
        *
        the default name with which the library is built.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 js.console.log("Hello World");    // Normal usage
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        From the perspective of the packages which make up the library, we refer
      }
      @{
        *
        to the running instance as C<ecma>.  The name C<ecma> is not set in stone,
      }
      @{
        *
        it is simply the default parameter name which we have standardized upon.
      }
      @{
        *
        ${

        }
      }
      @{
        =
        ${
 ecma.console.log("Hello World");  // Calling from inside a library package
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => document
    type => member
    id => js.document
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => dom
    type => namespace
    id => js.dom
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Canvas
    type => class
    id => js.dom.Canvas
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getLeft
    type => function
    id => js.dom.Canvas.getLeft
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getTop
    type => function
    id => js.dom.Canvas.getTop
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => pageX
    type => function
    id => js.dom.Canvas.pageX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => pageY
    type => function
    id => js.dom.Canvas.pageY
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => scrollX
    type => function
    id => js.dom.Canvas.scrollX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => scrollY
    type => function
    id => js.dom.Canvas.scrollY
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => windowX
    type => function
    id => js.dom.Canvas.windowX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => windowY
    type => function
    id => js.dom.Canvas.windowY
    depth => 4
  }
  %{
    props => %{
      param => @{
        target      <Element>   Target element
        type        <String>    Event type
        listener    <Function>  Callback function
        scope       <Object>    Callback scope
        args        <Array>     Arguments (appended after event parameter)
        useCapture  <Boolean>   Use capture
      }
    }
    content => @{
      @{
        *
        An event listener which is bound a particular scope.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var listener = new ecma.dom.EventListener(elem, listener);
        }
      }
      @{
        *
        ${
 var listener = new ecma.dom.EventListener(elem, listener, scope);
        }
      }
      @{
        *
        ${
 var listener = new ecma.dom.EventListener(elem, listener, scope, args);
        }
      }
      @{
        *
        ${
 var listener = new ecma.dom.EventListener(elem, listener, scope, args, useCapture);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 target      <Element>   Target element
        }
      }
      @{
        *
        ${
 type        <String>    Event type
        }
      }
      @{
        *
        ${
 listener    <Function>  Callback function
        }
      }
      @{
        *
        ${
 scope       <Object>    Callback scope
        }
      }
      @{
        *
        ${
 args        <Array>     Arguments (appended after event parameter)
        }
      }
      @{
        *
        ${
 useCapture  <Boolean>   Use capture
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function MyClass (elem) {
        }
      }
      @{
        *
        ${
   this.listener = new ecma.dom.EventListener(btn1, 'click', this.onClick, this);
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
 MyClass.prototype = {
        }
      }
      @{
        *
        ${
   'onClick': function (event) {
        }
      }
      @{
        *
        ${
     if (confirm('Remove event listener?')) {
        }
      }
      @{
        *
        ${
       this.destroy();
        }
      }
      @{
        *
        ${
     \}
        }
      }
      @{
        *
        ${
   \},
        }
      }
      @{
        *
        ${
   'destroy': function () {
        }
      }
      @{
        *
        ${
     this.listener.remove();
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${
 var hander = new MyClass(ecma.dom.getElement('btn1'));
        }
      }
      @{
        *
        ${
 ecma.dom.removeElement('btn1');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => EventListener
    type => class
    id => js.dom.EventListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Keypress listener
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var kl = new ecma.dom.KeyListener(elem, key, func);
        }
      }
      @{
        *
        ${
 var kl = new ecma.dom.KeyListener(elem, key, [cb]);
        }
      }
      @{
        *
        ${
 var kl = new ecma.dom.KeyListener(elem, key, func, scope);
        }
      }
      @{
        *
        ${
 var kl = new ecma.dom.KeyListener(elem, key, func, scope, args);
        }
      }
      @{
        *
        ${
 ...
        }
      }
      @{
        *
        ${
 kl.destroy(); // detaches events
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => KeyListener
    type => class
    id => js.dom.KeyListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Watches the document location href and dispatches a change event.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var ll = new ecma.dom.LocationListener();  // starts polling immediately
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ll.addActionListener('change', func);
        }
      }
      @{
        *
        ${
 ll.addActionListener('change', func, scope);
        }
      }
      @{
        *
        ${
 ll.addActionListener('change', func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The check interval is 75ms.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This class allows one to be notified when the document location changes.
      }
      @{
        *
        Implemented because there is no C<onLocationChange> event.  Enables a
      }
      @{
        *
        callback when only the C<hash> portion of the location is changing.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => LocationListener
    type => class
    id => js.dom.LocationListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => NodeStack
    type => class
    id => js.dom.NodeStack
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Wrapper class for cascading style sheets.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var css = new ecma.dom.StyleSheet();
        }
      }
      @{
        *
        ${
 var css = new ecma.dom.StyleSheet(props);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 props = {
        }
      }
      @{
        *
        ${
   'id': 'element-id',
        }
      }
      @{
        *
        ${
   'position': 'first|last' // dom position relative to other STYLE nodes
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var css = new ecma.dom.StyleSheet();
        }
      }
      @{
        *
        ${
 css.createRule('div.foo', {'border', '1px solid blue'});
        }
      }
      @{
        *
        ${
 css.updateRule('div.foo', {'width': '200px', 'height': '30em'});
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Internet Explorer (v7 at least) does not honor rule-names separated with a
      }
      @{
        *
        comma.  This will issue an exception:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 css.createRule('html, body', {'background', 'transparent'});
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => StyleSheet
    type => class
    id => js.dom.StyleSheet
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a new style rule.
      }
      @{
        *
        ${
 var rule = css.createRule('body', {'background': '#def'});
        }
      }
      @{
        *
        ${
 var rule = css.createRule('body', 'background:#def');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createRule
    type => function
    id => js.dom.StyleSheet.createRule
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Update an existing style rule, or create a new one if none exists.
      }
      @{
        *
        ${
 var rule = css.updateRule('h1', {'font-size': '1.8em'});
        }
      }
      @{
        *
        ${
 var rule = css.updateRule('h1', 'font-size: 1.8em;');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => updateRule
    type => function
    id => js.dom.StyleSheet.updateRule
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => addClassName
    type => function
    id => js.dom.addClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => addClassNames
    type => function
    id => js.dom.addClassNames
    depth => 3
  }
  %{
    props => %{
      param => @{
        target      <Element>   Target element
        listener    <Function>  Callback function
        scope       <Object>    Callback scope L<1>
        args        <Array>     Arguments (appended after event parameter) L<1>
        useCapture  <Boolean>   Use capture L<2>
      }
    }
    content => @{
      @{
        *
        Add an event listener to the target element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.addEventListener(elem, listener);
        }
      }
      @{
        *
        ${
 ecma.dom.addEventListener(elem, listener, scope);
        }
      }
      @{
        *
        ${
 ecma.dom.addEventListener(elem, listener, scope, args);
        }
      }
      @{
        *
        ${
 ecma.dom.addEventListener(elem, listener, scope, args, useCapture);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        \#
        If you are passing C<scope> or C<args>, the return value is the function 
      }
      @{
        \#
        needed for L<ecma.dom.removeEventListener>!
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 target      <Element>   Target element
        }
      }
      @{
        *
        ${
 listener    <Function>  Callback function
        }
      }
      @{
        *
        ${
 scope       <Object>    Callback scope L<1>
        }
      }
      @{
        *
        ${
 args        <Array>     Arguments (appended after event parameter) L<1>
        }
      }
      @{
        *
        ${
 useCapture  <Boolean>   Use capture L<2>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> This method create the intermediate anonymous function, which is returned.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> Is only used when C<Element.addEventListener> exists.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addEventListener
    type => function
    id => js.dom.addEventListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Append a child node.
      }
      @{
        *
        ${
 @param elem <String|DOMElement> parent element
        }
      }
      @{
        *
        ${
 @param child <DOMElement> child element
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => appendChild
    type => function
    id => js.dom.appendChild
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Append children to an element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param children <Array> to append L<1>
        }
      }
      @{
        *
        ${
 @param elem <ID or Element> to act upon L<1>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> For backward-compatability reasons these two arguments may be passed 
      }
      @{
        *
        in reverse order, i.e.:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.appendChildren(elem, children)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Passing the child array as the first argument is prefered as it matches 
      }
      @{
        *
        the argument specification of the Element method C<appendChild>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => appendChildren
    type => function
    id => js.dom.appendChildren
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Browser types.
      }
      @{
        *
        Logic derived from Prototype (L<http://www.prototypejs.org>)
      }
      @{
        *
        Depricated, use L<ecma.platform>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => browser
    type => structure
    id => js.dom.browser
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isGecko
    type => member
    id => js.dom.browser.isGecko
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isIE
    type => member
    id => js.dom.browser.isIE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isMobileSafari
    type => member
    id => js.dom.browser.isMobileSafari
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isOpera
    type => member
    id => js.dom.browser.isOpera
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isWebKit
    type => member
    id => js.dom.browser.isWebKit
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Canvas (aka window, screen, and page) dimensions and position
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => canvas
    type => structure
    id => js.dom.canvas
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getPosition
    type => function
    id => js.dom.canvas.getPosition
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => pageX
    type => function
    id => js.dom.canvas.pageX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => pageY
    type => function
    id => js.dom.canvas.pageY
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => scrollX
    type => function
    id => js.dom.canvas.scrollX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => scrollY
    type => function
    id => js.dom.canvas.scrollY
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => windowX
    type => function
    id => js.dom.canvas.windowX
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => windowY
    type => function
    id => js.dom.canvas.windowY
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => clearInterval
    type => function
    id => js.dom.clearInterval
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => clearSelection
    type => function
    id => js.dom.clearSelection
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => clearTimeout
    type => function
    id => js.dom.clearTimeout
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Constant values.
      }
      @{
        *
        See also: L<http://www.w3.org/TR/DOM-Level-3-Core/core.html>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => dom.constants
    type => namespace
    id => js.dom.constants
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ATTRIBUTE_NODE
    type => member
    id => js.dom.constants.ATTRIBUTE_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => CDATA_SECTION_NODE
    type => member
    id => js.dom.constants.CDATA_SECTION_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => COMMENT_NODE
    type => member
    id => js.dom.constants.COMMENT_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => DOCUMENT_FRAGMENT_NODE
    type => member
    id => js.dom.constants.DOCUMENT_FRAGMENT_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => DOCUMENT_NODE
    type => member
    id => js.dom.constants.DOCUMENT_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => DOCUMENT_TYPE_NODE
    type => member
    id => js.dom.constants.DOCUMENT_TYPE_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ELEMENT_NODE
    type => member
    id => js.dom.constants.ELEMENT_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ENTITY_NODE
    type => member
    id => js.dom.constants.ENTITY_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ENTITY_REFERENCE_NODE
    type => member
    id => js.dom.constants.ENTITY_REFERENCE_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => NOTATION_NODE
    type => member
    id => js.dom.constants.NOTATION_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => PROCESSING_INSTRUCTION_NODE
    type => member
    id => js.dom.constants.PROCESSING_INSTRUCTION_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => TEXT_NODE
    type => member
    id => js.dom.constants.TEXT_NODE
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a document element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = createElement(tagName);
        }
      }
      @{
        *
        ${
 var elem = createElement(tagName, attrs);
        }
      }
      @{
        *
        ${
 var elem = createElement(tagName, children);
        }
      }
      @{
        *
        ${
 var elem = createElement(tagName, attrs, children);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 tagName   <String>  Element tag name L<1>
        }
      }
      @{
        *
        ${
 attrs     <Object>  Attributes for this element
        }
      }
      @{
        *
        ${
 children  <Array>   Children of this element
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<arguments> are taken one at a time as a token.  If the token is a
      }
      @{
        *
        string, it is intepreted as the tag name.  If it is an object (and not
      }
      @{
        *
        an Array) then it is considered to be attributes.  And, if it is an
      }
      @{
        *
        array, it taken to be a list of createElement arguments for child nodes.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Create an image:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.createElement(
        }
      }
      @{
        \#
        ${
   'img', {src: 'http://www.example.com/images/example.png'}
        }
      }
      @{
        *
        ${
 );
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Create a comment node:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.createElement(
        }
      }
      @{
        \#
        ${
   '#comment', {nodeValue: 'Example'}
        }
      }
      @{
        *
        ${
 );
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Create a text node:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.createElement(
        }
      }
      @{
        \#
        ${
   '#text', {nodeValue: 'Example'}
        }
      }
      @{
        *
        ${
 );
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Create a div with child elements:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.createElement(
        }
      }
      @{
        \#
        ${
   'div', [
        }
      }
      @{
        \#
        ${
     'h1', {id: 'h101'},
        }
      }
      @{
        \#
        ${
     'p', {id: 'text42', style: {'font-size':'.8em'}}
        }
      }
      @{
        \#
        ${
   ]
        }
      }
      @{
        *
        ${
 );
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> Shortcut syntax for C<tagName>
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 TODO
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 tag#id
        }
      }
      @{
        *
        ${
 tag.class
        }
      }
      @{
        *
        ${
 tag#id.class
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 div#myDiv.padded      tagName = div
        }
      }
      @{
        *
        ${
                       id      = myDiv
        }
      }
      @{
        *
        ${
                       class   = padded
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createElement
    type => function
    id => js.dom.createElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an Array of DOM elements
      }
      @{
        *
        ${
 @param tag name of first element
        }
      }
      @{
        *
        ${
 @param attrs of first element
        }
      }
      @{
        *
        ${
 @param children of first element
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Parameters inspected to determine what they mean.  The first parameter must
      }
      @{
        *
        be a string, which specifies the tag name for this new element.  If the 
      }
      @{
        *
        next parameter is an Object, which is not an Array, it specifies the 
      }
      @{
        *
        attributes for this new element.  If the next param is (was) an Array
      }
      @{
        *
        object, it specifies the children of this new element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The items of the attributes Object are passed to createElement.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The items placed in the child Array are the arguments to recursive call to
      }
      @{
        *
        this method.
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createElements
    type => function
    id => js.dom.createElements
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => findNode
    type => function
    id => js.dom.findNode
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getAnchorsByRel
    type => function
    id => js.dom.getAnchorsByRel
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getAttribute
    type => function
    id => js.dom.getAttribute
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get our document's body
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getBody
    type => function
    id => js.dom.getBody
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getBottom
    type => function
    id => js.dom.getBottom
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getCanvasPosition
    type => function
    id => js.dom.getCanvasPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the (x, y) pixel coordinates which will center the
      }
      @{
        *
        element relative to the viewport (or contextElem if it is provided)
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param element
        }
      }
      @{
        *
        ${
 @param contextElem (optional)
        }
      }
      @{
        Where:
        ${

        }
      }
    }
    name => getCenteredPosition
    type => function
    id => js.dom.getCenteredPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the inner contentDocument of an IFRAME or FRAME.
      }
      @{
        *
        ${
 @param id of the FRAME or IFRAME
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getContentDocument
    type => function
    id => js.dom.getContentDocument
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getContentHeight
    type => function
    id => js.dom.getContentHeight
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the ECMAScript.Class for the specified frame.
      }
      @{
        *
        ${
 @param frame <String|Element> Id of or the frame element.
        }
      }
      @{
        *
        A new L<ECMAScript.Class> will be created if the window does not define
      }
      @{
        *
        a C<js> member.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getContentJS
    type => function
    id => js.dom.getContentJS
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getContentWidth
    type => function
    id => js.dom.getContentWidth
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the inner contentWindow of an IFRAME or FRAME.
      }
      @{
        *
        ${
 @param id of the FRAME or IFRAME
        }
      }
      @{
        ${

        }
      }
    }
    name => getContentWindow
    type => function
    id => js.dom.getContentWindow
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get a child node by its id.  This method constrains the scope of elements
      }
      @{
        *
        to the descendants of the given element, for times when could be many
      }
      @{
        *
        elements with the same id.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var node = ecma.dom.getDescendantById(elem, id);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param elem <String|HTMLElement> Element to start searching
        }
      }
      @{
        *
        ${
 @param id <String> Identifier of the target element
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 <div id="e1">
        }
      }
      @{
        *
        ${
   <p id="e2">...</p>
        }
      }
      @{
        *
        ${
 </div>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.getDescendantById('e1', 'e2'); // will return the P element
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getDescendantById
    type => function
    id => js.dom.getDescendantById
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Cross-browser function for referring to a document element by id.
      }
      @{
        *
        ${
 @param unk Element id, Element object, or a function (which ought return an
        }
      }
      @{
        *
        element object)
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getElement
    type => function
    id => js.dom.getElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Pixel coordinates and dimensions of the element
      }
      @{
        *
        returns: Object w/members: left, top, width, height
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getElementPosition
    type => function
    id => js.dom.getElementPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively fetch elements of the given attribute.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var nodes = js.dom.getElementsByAttribute(elem, 'href', '#')
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param elem <Element|ID> Parent element or id
        }
      }
      @{
        *
        ${
 @param name <String> Attribute name
        }
      }
      @{
        *
        ${
 @param value <String|Array> Attribute value or values
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getElementsByAttribute
    type => function
    id => js.dom.getElementsByAttribute
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get elements which have the specified class name.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var list = ecma.dom.getElementsByClassName(elem, className);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param elem <String|HTMLElement> Element to start searching
        }
      }
      @{
        *
        ${
 @param className <String> Class name to search for
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getElementsByClassName
    type => function
    id => js.dom.getElementsByClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively fetch elements with a specific C<nodeType>.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var array = ecma.dom.getElementsByNodeType(elem, type)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        For a list of nodeType values, refer to L<ecma.dom.constants>.  For
      }
      @{
        *
        example, to find all comment nodes in the body of a document:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var body = ecma.dom.getBody();
        }
      }
      @{
        *
        ${
 var type = ecma.dom.constants.COMMENT_NODE;
        }
      }
      @{
        *
        ${
 var list = ecma.dom.getElementsByNodeType(body, type);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getElementsByNodeType
    type => function
    id => js.dom.getElementsByNodeType
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively fetch elements of the given tag name or names.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elems = js.dom.getElementsByTagName(elem, tagName);
        }
      }
      @{
        *
        ${
 var elems = js.dom.getElementsByTagName(elem, [tagName, tagName]);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param  elem      <Element|ID>    Parent element or id
        }
      }
      @{
        *
        ${
 @param  tagName   <String|Array>  Tag name or names
        }
      }
      @{
        *
        ${
 @return elems     <Array>         Elements which match in DOM order
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Clear all control values
        }
      }
      @{
        *
        ${
 var controls = js.dom.getElementsByTagName(document.body, ['INPUT', 'TEXTAREA']);
        }
      }
      @{
        *
        ${
 for (var i = 0, ctrl; ctrl = controls[i]; i++) {
        }
      }
      @{
        *
        ${
   js.dom.setValue(ctrl, '');
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        ${
 attrs.type  Script type (default: 'text/javascript')
        }
        ${

        }
      }
    }
    name => getElementsByTagName
    type => function
    id => js.dom.getElementsByTagName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Pointer x/y coordinates derived directly from Prototype
      }
      @{
        ${

        }
      }
    }
    name => getEventPointer
    type => function
    id => js.dom.getEventPointer
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getEventTarget
    type => function
    id => js.dom.getEventTarget
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the frame specified by id.
      }
      @{
        *
        ${
 @param id <ID>
        }
      }
      @{
        ${
 @param target Element which it is to precede
        }
        ${

        }
      }
    }
    name => getFrame
    type => function
    id => js.dom.getFrame
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get our document's head
      }
      @{
        ${

        }
      }
    }
    name => getHead
    type => function
    id => js.dom.getHead
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getHeight
    type => function
    id => js.dom.getHeight
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerBottom
    type => function
    id => js.dom.getInnerBottom
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerHeight
    type => function
    id => js.dom.getInnerHeight
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerLeft
    type => function
    id => js.dom.getInnerLeft
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerPosition
    type => function
    id => js.dom.getInnerPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerRight
    type => function
    id => js.dom.getInnerRight
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerTop
    type => function
    id => js.dom.getInnerTop
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInnerWidth
    type => function
    id => js.dom.getInnerWidth
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getLeft
    type => function
    id => js.dom.getLeft
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getOpacity
    type => function
    id => js.dom.getOpacity
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get a parent element by its tag name.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var pElem = ecma.dom.getParentElement(elem);
        }
      }
      @{
        *
        ${
 var pElem = ecma.dom.getParentElement(elem, tagName);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param elem <String|HTMLElement> Element to start searching
        }
      }
      @{
        *
        ${
 @param tagName <String> Tag name of the parent element (optional)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 <table>
        }
      }
      @{
        *
        ${
   <tbody>
        }
      }
      @{
        *
        ${
     <tr>
        }
      }
      @{
        *
        ${
       <td id="e1">
        }
      }
      @{
        *
        ${
         ...
        }
      }
      @{
        *
        ${
       </td>
        }
      }
      @{
        *
        ${
     </tr>
        }
      }
      @{
        *
        ${
   </tbody>
        }
      }
      @{
        *
        ${
 </table>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.getParentElement('e1');          // will return the TR element
        }
      }
      @{
        *
        ${
 ecma.dom.getParentElement('e1', 'TABLE'); // will return the TABLE element
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getParentElement
    type => function
    id => js.dom.getParentElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getRight
    type => function
    id => js.dom.getRight
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the document's root element
      }
      @{
        ${
 var bool = ecma.dom.node.isEntity(elem);
        }
        ${

        }
      }
    }
    name => getRootElement
    type => function
    id => js.dom.getRootElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getScrollableParent
    type => function
    id => js.dom.getScrollableParent
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get CSS property
      }
      @{
        ${
 var bool = ecma.dom.node.isNotation(elem);
        }
        ${

        }
      }
    }
    name => getStyle
    type => function
    id => js.dom.getStyle
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        https://developer.mozilla.org/En/Determining_the_dimensions_of_elements
      }
      @{
        *
        http://msdn.microsoft.com/en-us/library/ms530302(VS.85).aspx
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 elem.getBBox          # svg x,y and width,height
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 elem.scrollHeight     # height of actual content
        }
      }
      @{
        *
        ${
 elem.clientHeight     # height of visible content
        }
      }
      @{
        *
        ${
 elem.offsetHeight     # height of element
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 elem.scrollWidth      # width of actual content (except IE)
        }
      }
      @{
        *
        ${
 elem.clientWidth      # width of visible content
        }
      }
      @{
        *
        ${
 elem.offsetWidth      # width of element
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getTop
    type => function
    id => js.dom.getTop
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get the logical value according to element type.
      }
      @{
        *
        ${
 @param elem <ID or Element> from which to get the value
        }
      }
      @{
        ${

        }
      }
    }
    name => getValue
    type => function
    id => js.dom.getValue
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Get name/value pairs from descendants.
      }
      @{
        *
        ${
 var obj = ecma.dom.getValues(element);
        }
      }
      @{
        *
        ${
 var obj = ecma.dom.getValues(element, ['input','textarea']);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getValues
    type => function
    id => js.dom.getValues
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Pixel coordinates and dimensions of the viewport
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getViewportPosition
    type => function
    id => js.dom.getViewportPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getWidth
    type => function
    id => js.dom.getWidth
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        css class names
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hasClassName
    type => function
    id => js.dom.hasClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        This structure groups functions which incorporate CSS and JS into the 
      }
      @{
        *
        current document.
      }
      @{
        ${

        }
      }
    }
    name => dom.include
    type => namespace
    id => js.dom.include
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Query the loaded status by script-element id.
      }
      @{
        *
        ${
 var bool = ecma.dom.hasLoaded(id);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hasLoaded
    type => function
    id => js.dom.include.hasLoaded
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Append a SCRIPT element to the document's HEAD.  If the element already
      }
      @{
        *
        exists this is a no-op and the C<onLoad> callback will be immediately
      }
      @{
        *
        applied.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.include.script(attrs);
        }
      }
      @{
        *
        ${
 var elem = ecma.dom.include.script(attrs, onLoad);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<attrs> object must contain either one of these two members:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 attrs.text  Script source code
        }
      }
      @{
        *
        ${
 attrs.src   URI of the script resource
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The element attributes C<attrs> are passed to L<ecma.dom.createElement>.
      }
      @{
        *
        The following attributes will be used if provided, otherwise set:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 attrs.id    Element id (default is randomly generated)
        }
      }
      @{
        *
        ${
 attrs.type  Script type (default: 'text/javascript')
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<onLoad> callback, if provided, will be executed after the script is 
      }
      @{
        *
        loaded.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => script
    type => function
    id => js.dom.include.script
    depth => 4
  }
  %{
    props => %{
      param => @{
        attrList <Array> See L<script>
        cb <Callback> Executed after scripts load
      }
      return => @{
        elems <Array> DOM script elements
      }
    }
    content => @{
      @{
        *
        Same as L<script>, however takes an array of C<attrs>. The callback is
      }
      @{
        *
        executed after all scripts have loaded.
      }
      @{
        *
        ${
 attrList <Array> See L<script>
        }
      }
      @{
        *
        ${
 cb <Callback> Executed after scripts load
        }
      }
      @{
        *
        ${
 elems <Array> DOM script elements
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => scripts
    type => function
    id => js.dom.include.scripts
    depth => 4
  }
  %{
    props => %{
      param => @{
        attrs Element attributes
      }
    }
    content => @{
      @{
        *
        Append a LINK or STYLE element to the document's HEAD.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var elem = ecma.dom.include.style(attrs);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<attrs> object must contain either one of these two members:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 attrs.text  CSS source code
        }
      }
      @{
        *
        ${
 attrs.href  URI of the stylesheet
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The element attributes C<attrs> are passed to L<ecma.dom.createElement>.
      }
      @{
        *
        The following attributes will be used if provided, otherwise set:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 attrs.id    Element id (default is randomly generated)
        }
      }
      @{
        *
        ${
 attrs.type  Style type (default: 'text/css')
        }
      }
      @{
        *
        ${
 attrs.rel   When C<attrs.href> is provided (default: 'text/css')
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The element attributes
      }
      @{
        *
        ${
 attrs Element attributes
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => style
    type => function
    id => js.dom.include.style
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert an element after another.
      }
      @{
        *
        ${
 @param elem Element to insert
        }
      }
      @{
        *
        ${
 @param target Element which is to precede it
        }
      }
      @{
        ${
 var removedElements = ecma.dom.removeElements(elem1, elem2, ...);
        }
        ${

        }
      }
    }
    name => insertAfter
    type => function
    id => js.dom.insertAfter
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert an element before another.
      }
      @{
        *
        ${
 @param elem Element to insert
        }
      }
      @{
        *
        ${
 @param target Element which it is to precede
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => insertBefore
    type => function
    id => js.dom.insertBefore
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert children after an existing element
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param elem <ID or Element> which is to preceed the child nodes
        }
      }
      @{
        *
        ${
 @param children <Array> to insert
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        XXX These parameters are unfortunately reversed from the standard
      }
      @{
        *
        C<insertAfter> function.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => insertChildrenAfter
    type => function
    id => js.dom.insertChildrenAfter
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert children before an existing element
      }
      @{
        *
        ${
 @param elem <ID or Element> which the child nodes are to preceed
        }
      }
      @{
        *
        ${
 @param children <Array> to insert
        }
      }
      @{
        ${

        }
      }
    }
    name => insertChildrenBefore
    type => function
    id => js.dom.insertChildrenBefore
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert a child element, adopting all of the parent element's children.
      }
      @{
        *
        ${
 ecma.dom.insertElementAdoptChildren(elem, parentElem);
        }
      }
      @{
        ${

        }
      }
    }
    name => insertElementAdoptChildren
    type => function
    id => js.dom.insertElementAdoptChildren
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Is an element a child of another?
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 <div id="id1">
        }
      }
      @{
        *
        ${
   <div id="id2">
        }
      }
      @{
        *
        ${
   </div>
        }
      }
      @{
        *
        ${
 </div>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var bool = ecma.dom.isChildOf('id2', 'id1'); // true
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isChildOf
    type => function
    id => js.dom.isChildOf
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Give the element a positioned style
      }
      @{
        *
        ${
 @param elem Element or Element ID
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => makePositioned
    type => function
    id => js.dom.makePositioned
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Utility functions which compare the C<nodeType> attribute.
      }
      @{
        ${

        }
      }
    }
    name => dom.node
    type => namespace
    id => js.dom.node
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isAttribute(elem);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isAttribute
    type => function
    id => js.dom.node.isAttribute
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isCdataSection(elem);
        }
      }
      @{
        ${
 @param delay in milliseconds
        }
        ${

        }
      }
    }
    name => isCdataSection
    type => function
    id => js.dom.node.isCdataSection
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isComment(elem);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isComment
    type => function
    id => js.dom.node.isComment
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isDocument(elem);
        }
      }
      @{
        where:
        ${

        }
      }
    }
    name => isDocument
    type => function
    id => js.dom.node.isDocument
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isDocumentFragment(elem);
        }
      }
      @{
        ${
 ecma.dom.setStyle(elem, styleName, value)
        }
        ${

        }
      }
    }
    name => isDocumentFragment
    type => function
    id => js.dom.node.isDocumentFragment
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isDocumentType(elem);
        }
      }
      @{
        ${
 ecma.dom.setStyles(elem, styles, importance)
        }
        ${

        }
      }
    }
    name => isDocumentType
    type => function
    id => js.dom.node.isDocumentType
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isElement(elem);
        }
      }
      @{
        ${
 ecma.dom.setTimeout(func, delay, scope);
        }
        ${

        }
      }
    }
    name => isElement
    type => function
    id => js.dom.node.isElement
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isEntity(elem);
        }
      }
      @{
        ${
 var value = ecma.dom.setValue(elem, value);
        }
        ${

        }
      }
    }
    name => isEntity
    type => function
    id => js.dom.node.isEntity
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isEntityReference(elem);
        }
      }
      @{
        Where:
        ${

        }
      }
    }
    name => isEntityReference
    type => function
    id => js.dom.node.isEntityReference
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isNotation(elem);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isNotation
    type => function
    id => js.dom.node.isNotation
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isProcessingInstruction(elem);
        }
      }
      @{
        ${

        }
      }
    }
    name => isProcessingInstruction
    type => function
    id => js.dom.node.isProcessingInstruction
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns true if it is.
      }
      @{
        *
        ${
 var bool = ecma.dom.node.isText(elem);
        }
      }
      @{
        ${
 ecma.dom.waitUntil(func, cond);
        }
        ${

        }
      }
    }
    name => isText
    type => function
    id => js.dom.node.isText
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert the element as the first child of the parent.
      }
      @{
        *
        ${
 @param elem <String|DOMElement> parent element
        }
      }
      @{
        *
        ${
 @param child <DOMElement> child element
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => prependChild
    type => function
    id => js.dom.prependChild
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeAttribute
    type => function
    id => js.dom.removeAttribute
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove all child nodes from an element
      }
      @{
        *
        ${
 @param element|id Element or Element ID
        }
      }
      @{
        the same results as when simply throwing a string.
        ${

        }
      }
    }
    name => removeChildren
    type => function
    id => js.dom.removeChildren
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeClassName
    type => function
    id => js.dom.removeClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeClassNames
    type => function
    id => js.dom.removeClassNames
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove a node from the document if it exists and has a parent.
      }
      @{
        *
        ${
 var removedElement = ecma.dom.removeElement(elem);
        }
      }
      @{
        ${
 throw new ecma.error.MissingArg(name);
        }
        ${

        }
      }
    }
    name => removeElement
    type => function
    id => js.dom.removeElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove a node from the document if it exists and has a parent, however do
      }
      @{
        *
        not remove its children.
      }
      @{
        *
        ${
 ecma.dom.removeElementOrphanChildren(elem1);
        }
      }
      @{
        ${

        }
      }
    }
    name => removeElementOrphanChildren
    type => function
    id => js.dom.removeElementOrphanChildren
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove multiple nodes from the document.  If the node does not have a
      }
      @{
        *
        parent it is ignored.
      }
      @{
        *
        ${
 var removedElements = ecma.dom.removeElements(elem1);
        }
      }
      @{
        *
        ${
 var removedElements = ecma.dom.removeElements(elem1, elem2, ...);
        }
      }
      @{
        *
        ${
 var removedElements = ecma.dom.removeElements([elem1, elem2, ...]);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeElements
    type => function
    id => js.dom.removeElements
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeEventListener
    type => function
    id => js.dom.removeEventListener
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove the style property from the given element.
      }
      @{
        *
        ${
 ecma.dom.removeStyle(elem, 'background-image');
        }
      }
      @{
        ${
 var cookies = new ecma.http.Cookies();
        }
        ${

        }
      }
    }
    name => removeStyle
    type => function
    id => js.dom.removeStyle
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Remove existing children and insert new ones.
      }
      @{
        *
        ${
 @param elem <ID or Element> to act upon
        }
      }
      @{
        *
        ${
 @param children <Array> to append
        }
      }
      @{
        ${

        }
      }
    }
    name => replaceChildren
    type => function
    id => js.dom.replaceChildren
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Replaces the given child element with another.
      }
      @{
        *
        ${
 var elem = ecma.dom.replaceElement(newElem, elem);
        }
      }
      @{
        ${
 var str = cookie.encode(obj);
        }
        ${

        }
      }
    }
    name => replaceElement
    type => function
    id => js.dom.replaceElement
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => scrollTo
    type => function
    id => js.dom.scrollTo
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set element attribute
      }
      @{
        ${
 name <String> Name of the cookie
        }
        ${

        }
      }
    }
    name => setAttribute
    type => function
    id => js.dom.setAttribute
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setClassName
    type => function
    id => js.dom.setClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Repeat execution of a callback function at a specific interval.
      }
      @{
        *
        ${
 @param func to call back
        }
      }
      @{
        *
        ${
 @param delay in milliseconds
        }
      }
      @{
        *
        ${
 @param scope for <func>
        }
      }
      @{
        *
        ${
 @param args passed to <func>
        }
      }
      @{
        *
        Supresses arguments passed by window.setInterval, such as the number of 
      }
      @{
        *
        seconds late in FF.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setInterval
    type => function
    id => js.dom.setInterval
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setOpacity
    type => function
    id => js.dom.setOpacity
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Position an absolute element with respect to the view port
      }
      @{
        *
        setPosition #elem, {props}
      }
      @{
        *
        where:
      }
      @{
        *
        ${
 props.position: 'top-third'|'center'|'bottom-left'
        }
      }
      @{
        ${

        }
      }
    }
    name => setPosition
    type => function
    id => js.dom.setPosition
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Sets a style property on an element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.setStyle(elem, styleName, value)
        }
      }
      @{
        *
        ${
 ecma.dom.setStyle(elem, styleName, value, importance)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 elem      <Element>   Identifier or reference
        }
      }
      @{
        *
        ${
 styleName <String>    Property name, like "background-color"
        }
      }
      @{
        *
        ${
 value     <String>    Property value
        }
      }
      @{
        *
        ${
 importance            Only used when C<style.setProperty> is supported
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The xbrowser diffferences between C<cssFloat> and C<float> are translated
      }
      @{
        *
        accordingly.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Tries to use C<style.setProperty>, otherwise converts the style name to
      }
      @{
        *
        its camel-cased counterpart and sets the style-object member.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When an exception is thrown, i.e., style name is not supported, the
      }
      @{
        *
        exception message is rewritten in a meaningful way, then rethrown.
      }
      @{
        ${
 ----------------------------- ---------------------------
        }
        ${

        }
      }
    }
    name => setStyle
    type => function
    id => js.dom.setStyle
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Sets multiple style values.
      }
      @{
        *
        ${
 ecma.dom.setStyles(elem, styles)
        }
      }
      @{
        *
        ${
 ecma.dom.setStyles(elem, styles, importance)
        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 elem      <Element>   Identifier or reference
        }
      }
      @{
        *
        ${
 styles    <Object>    Name-value style pairs
        }
      }
      @{
        *
        ${
 importance            Stylesheet importance property
        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${
 ecma.dom.setStyles('mydiv', {'width':'10px','height':'20px'});
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setStyles
    type => function
    id => js.dom.setStyles
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Delay execution of a callback function.
      }
      @{
        *
        ${
 ecma.dom.setTimeout(func, delay);
        }
      }
      @{
        *
        ${
 ecma.dom.setTimeout(func, delay, scope);
        }
      }
      @{
        *
        ${
 ecma.dom.setTimeout(func, delay, scope, args);
        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 func <Function> to call back
        }
      }
      @{
        *
        ${
 delay <Number> in milliseconds
        }
      }
      @{
        *
        ${
 scope <Object> for C<func>
        }
      }
      @{
        *
        ${
 args <Array> passed to C<func>
        }
      }
      @{
        *
        ${
 excb <Function|Array> Exception handler (optional) L<1>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Supresses arguments passed by window.setTimeout, such as the number of 
      }
      @{
        *
        seconds late in FF.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> If a C<excb> function is provided it is passed any exception which
      }
      @{
        *
        may be thrown while applying the callback.  The C<excb> function is
      }
      @{
        *
        called with the same scope (if provided) as the callback, i.e.,
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 excb.call(scope, ex);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setTimeout
    type => function
    id => js.dom.setTimeout
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Sets the value for the given element.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var value = ecma.dom.setValue(elem, value);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 elem    <Element>     Identifier or reference
        }
      }
      @{
        *
        ${
 value   <String>      New value
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When C<elem.tagName> is ___, the property we set is ___:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 INPUT['hidden']       value
        }
      }
      @{
        *
        ${
 INPUT['password']     value
        }
      }
      @{
        *
        ${
 INPUT['text']         value
        }
      }
      @{
        *
        ${
 INPUT['radio']        value || checked L<1>
        }
      }
      @{
        *
        ${
 INPUT['checkbox']     value || checked L<1>
        }
      }
      @{
        *
        ${
 SELECT                value
        }
      }
      @{
        *
        ${
 TEXTAREA              value
        }
      }
      @{
        *
        ${
 PRE                   innerHTML L<2>
        }
      }
      @{
        *
        ${
 *                     innerHTML or innerText or <Excpetion> L<3>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> When setting radio and checkbox input fields: if the value is a 
      }
      @{
        *
        boolean or the string 'on' or 'off', we will set the checked property; 
      }
      @{
        *
        otherwise the value is set.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> Internet Explorer workaround: When setting the C<innerHTML> member of 
      }
      @{
        *
        a PRE element we create a temporary (DIV) container, set its innerHTML 
      }
      @{
        *
        member, then replace the PRE's children with these newborns.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<3> If C<elem.innerHTML> is defined it is set, otherwise if
      }
      @{
        *
        C<elem.innerText> is defined, it is set.  Otherwise an unhandled tag 
      }
      @{
        *
        exception is thrown.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setValue
    type => function
    id => js.dom.setValue
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Stops the given event from propigating and bubbling.
      }
      @{
        *
        ${
 ecma.dom.stopEvent(event);
        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 event   <Event>       The event to stop
        }
      }
      @{
        *
        Additionally, C<event.stopped> is set to C<true>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => stopEvent
    type => function
    id => js.dom.stopEvent
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => toggleClassName
    type => function
    id => js.dom.toggleClassName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => toggleDisplay
    type => function
    id => js.dom.toggleDisplay
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the name of the element attribute in the language running platform
      }
      @{
        *
        ${
 var attrName = ecma.dom.translateAttributeName('className');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => translateAttributeName
    type => function
    id => js.dom.translateAttributeName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the style property-name in the language of the running platform
      }
      @{
        *
        ${
 var styleName = ecma.dom.translateStyleName('cssFloat');
        }
      }
      @{
        A valid object will always be returned, allowing one to fetch a single 
        ${

        }
      }
    }
    name => translateStyleName
    type => function
    id => js.dom.translateStyleName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Calls a function after a condition is met.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.dom.waitUntil(func, cond);
        }
      }
      @{
        *
        ${
 ecma.dom.waitUntil(func, cond, delay);
        }
      }
      @{
        *
        ${
 ecma.dom.waitUntil(func, cond, delay, scope);
        }
      }
      @{
        *
        ${
 ecma.dom.waitUntil(func, cond, delay, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 func      <Function>  Function to apply after
        }
      }
      @{
        *
        ${
 cond      <Function>  Condition to be met
        }
      }
      @{
        *
        ${
 delay     <Number>    Milliseconds to delay before checking (default=10)
        }
      }
      @{
        *
        ${
 scope     <Object>    Applied to func and cond functions
        }
      }
      @{
        *
        ${
 args      <Array>     Passed to func and cond functions
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The time between calls doubles (decays) each time the condition function 
      }
      @{
        *
        returns false.  For example, when C<delay> is 10 (the default),
      }
      @{
        *
        conditional checks will occur:
      }
      @{
        *
        ${
 1st check:  10 ms after L<ecma.dom.waitUntil> is called
        }
      }
      @{
        *
        ${
 2nd check:  20 ms after the 1st check
        }
      }
      @{
        *
        ${
 3rd check:  40 ms after the 2nd check
        }
      }
      @{
        *
        ${
 4th check:  80 ms after the 3rd check
        }
      }
      @{
        *
        ${
 5th check: 160 ms after the 3rd check
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        TODO: Allow the C<delay> parameter to specify the decay value as its
      }
      @{
        *
        decimal portion.  For instance, 10.2 would indicate a delay of 10 with a
      }
      @{
        *
        decay of 2.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        TODO: Provide a mechanism for cancelation.  For example, if the delay is
      }
      @{
        *
        1000, abort.  Maybe another part of the C<delay> paramter, as in
      }
      @{
        *
        "10.2/1000" means delay=10, decay=2, and timeout=1000...
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => waitUntil
    type => function
    id => js.dom.waitUntil
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        XXX Depricated. Instead, use:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 throw new ecma.error.Assertion(...);
        }
      }
      @{
        *
        ${
 throw new ecma.error.MissingArg(...);
        }
      }
      @{
        *
        ${
 throw new ecma.error.IllegalArg(...);
        }
      }
      @{
        *
        ${
 throw new ecma.error.Multiple(...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This is a collection of exception strings.  What I'm seeing is that
      }
      @{
        *
        throwing custom Error objects (error/programatic.js) does not yield
      }
      @{
        *
        the same results as when simply throwing a string.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The advantage of throwing an error object is that in a catch method
      }
      @{
        *
        one can test for instanceof a particular exception class.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The advantage of throwing a string is that the debugger* gives a
      }
      @{
        *
        nice stack trace and points you to the line where the exception
      }
      @{
        *
        was raised.  However, one has no choice but to interrogate the
      }
      @{
        *
        exception string to find out what kind of error it is.  Which sucks
      }
      @{
        *
        if you want to be say, multilingual.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        These strings are implemented as functions for two reasons: first,
      }
      @{
        *
        it allows you to pass arguments so we can provide formatted messages;
      }
      @{
        *
        and second, upgrading to custom Error-derived objects is an in-place
      }
      @{
        *
        refactor (should call toString() so to ensure the return type is
      }
      @{
        *
        the same).
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => error
    type => namespace
    id => js.error
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Indicates an assertion failed.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 throw new ecma.error.Assertion();
        }
      }
      @{
        *
        ${
 throw new ecma.error.Assertion(message);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Assertion
    type => class
    id => js.error.Assertion
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Indicates a function argument is not correct.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 throw new ecma.error.IllegalArg(name);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where C<name> indicates the name of the offending argument.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => IllegalArg
    type => class
    id => js.error.IllegalArg
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Indicates a required function argument was not provided.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 throw new ecma.error.MissingArg(name);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where C<name> indicates the name of the missing argument.
      }
      @{
        ${
 uri         <ecma.http.Location|String>   Compare-to location
        }
        ${

        }
      }
    }
    name => MissingArg
    type => class
    id => js.error.MissingArg
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Indicates multiple exceptions occured.  Used in the case where throwing
      }
      @{
        *
        each exception at the time would prevent critical code from executing.
      }
      @{
        *
        For instance, when applying callback functions (listeners).
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 throw new ecma.error.Multiple(array);
        }
      }
      @{
        ${
 uri         <ecma.http.Location|String>   Compare-to location
        }
        ${

        }
      }
    }
    name => Multiple
    type => class
    id => js.error.Multiple
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => extend
    type => function
    id => js.extend
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => fx
    type => namespace
    id => js.fx
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Animator
    type => class
    id => js.fx.Animator
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => addEffect
    type => function
    id => js.fx.Animator.addEffect
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isRunning
    type => function
    id => js.fx.Animator.isRunning
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeEffect
    type => function
    id => js.fx.Animator.removeEffect
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setDuration
    type => function
    id => js.fx.Animator.setDuration
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => start
    type => function
    id => js.fx.Animator.start
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => stop
    type => function
    id => js.fx.Animator.stop
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => AnimatorProgress
    type => class
    id => js.fx.AnimatorProgress
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getElapsed
    type => function
    id => js.fx.AnimatorProgress.getElapsed
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getLap
    type => function
    id => js.fx.AnimatorProgress.getLap
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getProportion
    type => function
    id => js.fx.AnimatorProgress.getProportion
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isComplete
    type => function
    id => js.fx.AnimatorProgress.isComplete
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => toString
    type => function
    id => js.fx.AnimatorProgress.toString
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => update
    type => function
    id => js.fx.AnimatorProgress.update
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Effect
    type => class
    id => js.fx.Effect
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => draw
    type => function
    id => js.fx.Effect.draw
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getAnimator
    type => function
    id => js.fx.Effect.getAnimator
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getDelta
    type => function
    id => js.fx.Effect.getDelta
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getDuration
    type => function
    id => js.fx.Effect.getDuration
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onFirst
    type => function
    id => js.fx.Effect.onFirst
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onLast
    type => function
    id => js.fx.Effect.onLast
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onNext
    type => function
    id => js.fx.Effect.onNext
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => removeAnimator
    type => function
    id => js.fx.Effect.removeAnimator
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setAnimator
    type => function
    id => js.fx.Effect.setAnimator
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setDuration
    type => function
    id => js.fx.Effect.setDuration
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => start
    type => function
    id => js.fx.Effect.start
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => stop
    type => function
    id => js.fx.Effect.stop
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => createEffect
    type => function
    id => js.fx.createEffect
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => fx.effects
    type => namespace
    id => js.fx.effects
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Opacify
    type => class
    id => js.fx.effects.Opacify
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => draw
    type => function
    id => js.fx.effects.Opacify.draw
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getDelta
    type => function
    id => js.fx.effects.Opacify.getDelta
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => perform
    type => function
    id => js.fx.perform
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        The C<http> namespace groups functions and classes used while making
      }
      @{
        *
        HTTP Requests.
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
      }
    }
    name => http
    type => namespace
    id => js.http
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Provides methods for getting and setting cookies.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var cookies = new ecma.http.Cookies();
        }
      }
      @{
        if you want it to be a base-class of a multiply-inhertited sub-class.
        ${

        }
      }
    }
    name => Cookies
    type => class
    id => js.http.Cookies
    depth => 3
  }
  %{
    props => %{
      param => @{
        str <String> Encoded string
      }
    }
    content => @{
      @{
        *
        Decode an encoded string.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var obj = cookie.decode(str);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 str <String> Encoded string
        }
      }
      @{
        ${
 var MyClass = function () { ... };
        }
        ${

        }
      }
    }
    name => decode
    type => function
    id => js.http.Cookies.decode
    depth => 4
  }
  %{
    props => %{
      param => @{
        obj <Object> Data object
      }
    }
    content => @{
      @{
        *
        Encode an object for storage.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var str = cookie.encode(obj);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 obj <Object> Data object
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => encode
    type => function
    id => js.http.Cookies.encode
    depth => 4
  }
  %{
    props => %{
      param => @{
        name <String> Name of the cookie
      }
    }
    content => @{
      @{
        *
        Get a cookie by its name.
      }
      @{
        *
        ${
 name <String> Name of the cookie
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => get
    type => function
    id => js.http.Cookies.get
    depth => 4
  }
  %{
    props => %{
      param => @{
        name <String> Name of the cookie
      }
    }
    content => @{
      @{
        *
        Get a data object stored in a cookie.
      }
      @{
        *
        ${
 name <String> Name of the cookie
        }
      }
      @{
        ${
 // Create a class MyClass which extends ecma.lsn.ComboBox
        }
        ${

        }
      }
    }
    name => getObject
    type => function
    id => js.http.Cookies.getObject
    depth => 4
  }
  %{
    props => %{
      param => @{
        name <String> Name of the cookie
      }
    }
    content => @{
      @{
        *
        Remove a cookie.
      }
      @{
        *
        ${
 name <String> Name of the cookie
        }
      }
      @{
        This will append an IMG element to the dom which functions as the drop-
        ${

        }
      }
    }
    name => remove
    type => function
    id => js.http.Cookies.remove
    depth => 4
  }
  %{
    props => %{
      param => @{
        name  <String> Name of the cookie
        value <String> Value of the cookie
        days  <String> Number of days before it expires
      }
    }
    content => @{
      @{
        *
        Set a cookie to the given value.
      }
      @{
        *
        ${
 name  <String> Name of the cookie
        }
      }
      @{
        *
        ${
 value <String> Value of the cookie
        }
      }
      @{
        *
        ${
 days  <String> Number of days before it expires
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => set
    type => function
    id => js.http.Cookies.set
    depth => 4
  }
  %{
    props => %{
      param => @{
        name  <String> Name of the cookie
        obj   <Object> Cookie data
        days  <String> Number of days before it expires
      }
    }
    content => @{
      @{
        *
        Set a cookie to hold the value of a data object.
      }
      @{
        *
        ${
 name  <String> Name of the cookie
        }
      }
      @{
        *
        ${
 obj   <Object> Cookie data
        }
      }
      @{
        *
        ${
 days  <String> Number of days before it expires
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setObject
    type => function
    id => js.http.Cookies.setObject
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Provides an object structure like C<document.location> for a given URL,
      }
      @{
        *
        and methods for working with the URL.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var location = new ecma.http.Location(); // copies document location
        }
      }
      @{
        *
        ${
 var location = new ecma.http.Location(url);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Sample:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var url = 'http://www.example.com:8000/cgi-bin/test.pl?key=value#id';
        }
      }
      @{
        *
        ${
 var location = new ecma.http.Location(url);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     2                          3             
        }
      }
      @{
        *
        ${
     .-------------------------..---------------------------.
        }
      }
      @{
        *
        ${
     |                         ||                           |
        }
      }
      @{
        *
        ${
 1 - http://www.example.com:8000/cgi-bin/test.pl?key=value#id
        }
      }
      @{
        *
        ${
     |  | |               | |  ||              ||        || |
        }
      }
      @{
        *
        ${
     '--' '---------------' '--''--------------''--------''-'
        }
      }
      @{
        *
        ${
     4    5                 6   7               8         9
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 \# Accessor                    Terminology
        }
      }
      @{
        *
        ${
 ----------------------------- ---------------------------
        }
      }
      @{
        *
        ${
 1 location.getUri()           URI, URL L<1>
        }
      }
      @{
        *
        ${
 2 location.getOrigin()        origin
        }
      }
      @{
        *
        ${
 3 location.getAddress()       address L<1>
        }
      }
      @{
        *
        ${
 4 location.protocol           protocol
        }
      }
      @{
        *
        ${
 5 location.hostname           authority, domain, hostname
        }
      }
      @{
        *
        ${
 6 location.port               port
        }
      }
      @{
        *
        ${
 7 location.pathname           path, pathname
        }
      }
      @{
        *
        ${
 8 location.search             search, query L<2>
        }
      }
      @{
        *
        ${
 9 location.hash               hash L<3>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        As we don't know how to make object members which behive like functions,
      }
      @{
        *
        there is no C<href> property.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> Note that C<location.getHref()> will return the full URI if it is not
      }
      @{
        *
        of the same origin, otherwise it acts as C<location.getAddress()>.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> Use C<location.getSearch()> to return the search field without the
      }
      @{
        *
        leading C<?>.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<3> Use C<location.getHash()> to return the hash field without the
      }
      @{
        *
        leading C<#>.
      }
      @{
        *
        ${

        }
      }
    }
    name => Location
    type => class
    id => js.http.Location
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Adds a parameter to the search portion of this location.  Remember to
      }
      @{
        *
        C<encodeURIComponent> your key and value.
      }
      @{
        *
        ${
 var search = location.addParameter(key, value);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addParameter
    type => function
    id => js.http.Location.addParameter
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => copyDocumentLocation
    type => function
    id => js.http.Location.copyDocumentLocation
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the pathname, query, and hash portions of this location.
      }
      @{
        *
        ${
 var addr = location.getAddress();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getAddress
    type => function
    id => js.http.Location.getAddress
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the URI of the document, i.e., niether search nor hash segements 
      }
      @{
        *
        are included.
      }
      @{
        *
        ${
 var uri = location.getDocumentUri();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getDocumentUri
    type => function
    id => js.http.Location.getDocumentUri
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns hash portion of this location without the leading C<#>.
      }
      @{
        *
        ${
 var hash = location.getHash();
        }
      }
      @{
        ${

        }
      }
    }
    name => getHash
    type => function
    id => js.http.Location.getHash
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        When the location is of the same origin, returns
      }
      @{
        *
        L<ecma.http.Location.getAddress>, otherwise returns
      }
      @{
        *
        L<ecma.http.Location.getUri>.
      }
      @{
        The C<optStyle> object is passed to L<ecma.dom.createElement> as the style
        ${

        }
      }
    }
    name => getHref
    type => function
    id => js.http.Location.getHref
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getOrigin
    type => function
    id => js.http.Location.getOrigin
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns an object of search parameters.
      }
      @{
        *
        ${
 var object = location.getParameters();
        }
      }
      @{
        *
        A valid object will always be returned, allowing one to fetch a single 
      }
      @{
        *
        parameter (which may or may not exist) as:
      }
      @{
        *
        ${
 var string = location.getParameters()[key];
        }
      }
      @{
        This function does not work well when the window becomes a smaller size.
        ${

        }
      }
    }
    name => getParameters
    type => function
    id => js.http.Location.getParameters
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns search portion of this location without the leading C<?>.
      }
      @{
        *
        ${
 var search = location.getSearch();
        }
      }
      @{
        ${
 mask.show(optStyle);
        }
        ${

        }
      }
    }
    name => getSearch
    type => function
    id => js.http.Location.getSearch
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the entire URI string.
      }
      @{
        ${

        }
      }
    }
    name => getUri
    type => function
    id => js.http.Location.getUri
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => hash
    type => member
    id => js.http.Location.hash
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => hostname
    type => member
    id => js.http.Location.hostname
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Tests that the provided location refers to the same document as this
      }
      @{
        *
        location.
      }
      @{
        *
        ${
 var bool = location.isSameDocument(uri);
        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 location    <ecma.http.Location>          This location
        }
      }
      @{
        *
        ${
 uri         <ecma.http.Location|String>   Compare-to location
        }
      }
      @{
        ${

        }
      }
    }
    name => isSameDocument
    type => function
    id => js.http.Location.isSameDocument
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Tests that the provided location originates from the same authority
      }
      @{
        *
        using the same protocol and port as this location.
      }
      @{
        *
        ${
 var bool = location.isSameOrigin(uri);
        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 location    <ecma.http.Location>          This location
        }
      }
      @{
        *
        ${
 uri         <ecma.http.Location|String>   Compare-to location
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isSameOrigin
    type => function
    id => js.http.Location.isSameOrigin
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Sets this object's member values accoding to the provided URI.
      }
      @{
        *
        ${
 location.parseUri(newUri);
        }
      }
      @{
        ${
 var form = new ecma.lsn.forms.Form(def, vals);
        }
        ${

        }
      }
    }
    name => parseUri
    type => function
    id => js.http.Location.parseUri
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => pathname
    type => member
    id => js.http.Location.pathname
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => port
    type => member
    id => js.http.Location.port
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => protocol
    type => member
    id => js.http.Location.protocol
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => search
    type => member
    id => js.http.Location.search
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Calls L<ecma.http.Location.getUri>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => toString
    type => function
    id => js.http.Location.toString
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => PerlModule
    type => class
    id => js.http.PerlModule
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => submit
    type => function
    id => js.http.PerlModule.submit
    depth => 4
  }
  %{
    props => %{
      param => @{
        uri of the request
        options for the request
      }
    }
    content => @{
      @{
        *
        XMLHttpRequest wrapper with hooks for resopnse callbacks.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 uri of the request
        }
      }
      @{
        *
        ${
 options for the request
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Several ways to do the same thing:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var req = new js.http.Request('http://www.example.com');
        }
      }
      @{
        *
        ${
 req.onSuccess = function (xhr) {
        }
      }
      @{
        *
        ${
   alert(xhr.responseText);
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var req = new js.http.Request('http://www.example.com');
        }
      }
      @{
        *
        ${
 req.addEventListener('onSuccess', function () { ... });
        }
      }
      @{
        *
        ${
 req.submit();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
      }
    }
    name => Request
    type => class
    id => js.http.Request
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Adds a new event listener.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 req.addEventListener(type, func);
        }
      }
      @{
        *
        ${
 req.addEventListener(type, func, scope);
        }
      }
      @{
        *
        ${
 req.addEventListener(type, func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${
 
        }
      }
      @{
        *
        ${
 type    <String>      Event type L<1>
        }
      }
      @{
        *
        ${
 func    <Function>    Callback function L<2>
        }
      }
      @{
        *
        ${
 scope   <Object>      Scope applied to `func`
        }
      }
      @{
        *
        ${
 args    <Array>       Arguments passed to `func` L<3>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> Event types are determined by the HTTP status returned by the request,
      }
      @{
        *
        are case insensitive, and are not requred to use the 'on' prefix.  Events
      }
      @{
        *
        types may also literal HTTP status numbers, which have precedence. The 
      }
      @{
        *
        following are synonymous:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 req.addEventListener('onInternalServerError', ...);
        }
      }
      @{
        *
        ${
 req.addEventListener('InternalServerError', ...);
        }
      }
      @{
        *
        ${
 req.addEventListener('internalservererror', ...);
        }
      }
      @{
        *
        ${
 req.addEventListener(500, ...);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        See also: L<ecma.lang.HTTP_STATUS_NAMES>
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> When no C<scope> is provided, the C<func> is called with C<req>
      }
      @{
        *
        as its scope.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<3> Callback functions are always passed the XMLHttpRequest object as
      }
      @{
        *
        the first argument.  Any additional arguments specified in the C<args>
      }
      @{
        *
        parameter are appended thereafter.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => addEventListener
    type => function
    id => js.http.Request.addEventListener
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Override this function to inspect the response and supress all
      }
      @{
        *
        completion callbacks.  If you return false, call C<completeRequest()>
      }
      @{
        *
        to invoke the completion callbacks.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        See C<ecma.lsn.Request> for how this is used to resubmit requests where
      }
      @{
        *
        authorization is required.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => canComplete
    type => function
    id => js.http.Request.canComplete
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Invoke all of the callbacks associated with a completed request.
      }
      @{
        ${

        }
      }
    }
    name => completeRequest
    type => function
    id => js.http.Request.completeRequest
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Returns the value of a specific HTTP header.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var result = req.getHeader(name);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 name  <String>  Name of the header field
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var result = req.getHeader('If-Modified-Since');
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => getHeader
    type => function
    id => js.http.Request.getHeader
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Creates the argument for C<XMLHttpRequest.send> from that which was
      }
      @{
        *
        passed to L<js.http.Request.submit>.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var result = req.parseBody(); // null is returned
        }
      }
      @{
        *
        ${
 var result = req.parseBody(body);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When C<body> is a String, it is passed as-is.  When it is an object, it is 
      }
      @{
        *
        iterated and each key and value are URI-encoded and append as "key=value&" 
      }
      @{
        *
        pairs.
      }
      @{
        Currently this uses the C<setTimeout> function of the window object.  This
        ${

        }
      }
    }
    name => parseBody
    type => function
    id => js.http.Request.parseBody
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Parse the xhr.responseText as needed.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Called when the request is complete, before any event listeners.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Create a new class derived from ecma.http.Request
        }
      }
      @{
        *
        ${
 function MyRequest () {ecma.http.Request.apply(this, arguments);};
        }
      }
      @{
        *
        ${
 MyRequest.prototype = ecma.lang.createMethods(ecma.http.Request);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Override the parseResponse method
        }
      }
      @{
        *
        ${
 MyRequest.prototype.parseResponse = function () {
        }
      }
      @{
        *
        ${
   this.responseText = this.xhr.responseText;
        }
      }
      @{
        *
        ${
   this.responseText.replace(/</, '&lt;');
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => parseResponse
    type => function
    id => js.http.Request.parseResponse
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Removes an existing event listener.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 req.removeEventListener(type, func)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 type <String> Event type
        }
      }
      @{
        *
        ${
 func <Func)   Function reference, === to that passed in addEventListener
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        TODO: Remove logic should also accept and compare C<scope>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => removeEventListener
    type => function
    id => js.http.Request.removeEventListener
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Submits this request again, re-using its existing body.
      }
      @{
        *
        ${
 req.resubmit();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => resubmit
    type => function
    id => js.http.Request.resubmit
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Sets the value for the specified header.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 req.setHeader(name, value);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 name  <String>  Name of the header field
        }
      }
      @{
        *
        ${
 value <String>  Value of the header field
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => setHeader
    type => function
    id => js.http.Request.setHeader
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Submits the request.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 req.submit();
        }
      }
      @{
        *
        ${
 req.submit(body);
        }
      }
      @{
        *
        ${
 req.submit(body, cb);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 body  <String|Object>   Body of the request
        }
      }
      @{
        *
        ${
 cb    <Function|Array>  Callback (called once when the request completes)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<body> argument is passed to C<parseBody>, override this in your
      }
      @{
        *
        derived class if necessary.  See L<js.http.Request.parseBody> for this 
      }
      @{
        *
        implementation
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => submit
    type => function
    id => js.http.Request.submit
    depth => 4
  }
  %{
    props => %{
      base => @{
        lsn.Request
      }
    }
    content => @{
      @{
        *
        ${
 lsn.Request
        }
      }
      @{
        ${
 @param name to convert
        }
        ${

        }
      }
    }
    name => Stream
    type => class
    id => js.http.Stream
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Compare originating servers.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var bool = ecma.http.isSameOrigin(uri);
        }
      }
      @{
        *
        ${
 var bool = ecma.http.isSameOrigin(uri, uri);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Is the resource located on the server at the port using the same protocol
      }
      @{
        *
        which served the document.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var bool = ecma.http.isSameOrigin('http://www.example.com');
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Are the two URI's served from the same origin
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var bool = ecma.http.isSameOrigin('http://www.example.com', 'https://www.example.com');
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isSameOrigin
    type => function
    id => js.http.isSameOrigin
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Creates a new XMLHttpRequest object as provided by the platform.
      }
      @{
        *
        ${
 var xhr = js.http.newXHR();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => newXHR
    type => function
    id => js.http.newXHR
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => impl
    type => namespace
    id => js.impl
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Parameters
    type => class
    id => js.impl.Parameters
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return a single parameter value.
      }
      @{
        ${
 var result = grep (value, list);
        }
        ${

        }
      }
    }
    name => getParameter
    type => function
    id => js.impl.Parameters.getParameter
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the underlying object.
      }
      @{
        ${

        }
      }
    }
    name => getParameters
    type => function
    id => js.impl.Parameters.getParameters
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Overlay the provided parameters on to the underlying object.
      }
      @{
        ${

        }
      }
    }
    name => overlayParameters
    type => function
    id => js.impl.Parameters.overlayParameters
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set a single parameter value.
      }
      @{
        an array.
        ${

        }
      }
    }
    name => setParameter
    type => function
    id => js.impl.Parameters.setParameter
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Set the underlying object.
      }
      @{
        ${

        }
      }
    }
    name => setParameters
    type => function
    id => js.impl.Parameters.setParameters
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ECMA language.
      }
      @{
        ${

        }
      }
    }
    name => lang
    type => namespace
    id => js.lang
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Throw an exception if expression is false.
      }
      @{
        ${
 @param obj <Object>
        }
        ${

        }
      }
    }
    name => assert
    type => function
    id => js.lang.assert
    depth => 3
  }
  %{
    props => %{
      param => @{
        func    <Function|Array> Callback function L<1>
        scope   <Object> Default scope
        args    <Array> Arguments L<2>
      }
    }
    content => @{
      @{
        *
        Apply a callback function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var result = ecma.lang.callback(func);
        }
      }
      @{
        *
        ${
 var result = ecma.lang.callback(func, scope);
        }
      }
      @{
        *
        ${
 var result = ecma.lang.callback(func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 func    <Function|Array> Callback function L<1>
        }
      }
      @{
        *
        ${
 scope   <Object> Default scope
        }
      }
      @{
        *
        ${
 args    <Array> Arguments L<2>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> When C<func> is an array, it is taken to conform to this standard
      }
      @{
        *
        structure:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 func[0]       <Function>  Callback function
        }
      }
      @{
        *
        ${
 func[1]       <Object>    Scope (optional) L<2>
        }
      }
      @{
        *
        ${
 func[2]       <Array>     Arguments (optional) L<3>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This allows one to pass around callbacks as arrays, then use this method to
      }
      @{
        *
        apply them.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> If the inner scope is not defined, the outer is used.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<3> The parameters in the outer C<args> array precede those in the inner
      }
      @{
        *
        C<func> array should C<func> be an array.  This is done as the inner
      }
      @{
        *
        arguments are caller-defined, and hence more variable.
      }
      @{
        *
        ${

        }
      }
      @{
        \#
        Example
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function MyClass () {};
        }
      }
      @{
        *
        ${
 MyClass.prototype = {
        }
      }
      @{
        *
        ${
   'run': function (cb) {
        }
      }
      @{
        *
        ${
     // do something
        }
      }
      @{
        *
        ${
     ecma.lang.callback(cb, this, [1, 2, 3]);
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function onComplete () {
        }
      }
      @{
        *
        ${
   for (var i = 0; i < arguments.length; i++) {
        }
      }
      @{
        *
        ${
     ecma.console.log('arguments [' + i + '] = ' + arguments[i]);
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var obj = new MyClass();
        }
      }
      @{
        \#
        ${
 obj.run([onComplete, this, ['a', 'b', 'c']])
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Will output:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 arguments[0] = 1
        }
      }
      @{
        *
        ${
 arguments[1] = 2
        }
      }
      @{
        *
        ${
 arguments[2] = 3
        }
      }
      @{
        *
        ${
 arguments[3] = a
        }
      }
      @{
        *
        ${
 arguments[4] = b
        }
      }
      @{
        *
        ${
 arguments[5] = c
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Additionally, the calling code could also:
      }
      @{
        *
        ${

        }
      }
      @{
        \#
        ${
 obj.run(onComplete);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Which would output:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 arguments[0] = 1
        }
      }
      @{
        *
        ${
 arguments[1] = 2
        }
      }
      @{
        *
        ${
 arguments[2] = 3
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Or, say it creates its own callback function:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var cb = ecma.lang.createCallback(onComplete, this, ['x', 'y']);
        }
      }
      @{
        \#
        ${
 obj.run(cb);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Which would output:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 arguments[0] = 1
        }
      }
      @{
        *
        ${
 arguments[1] = 2
        }
      }
      @{
        *
        ${
 arguments[2] = 3
        }
      }
      @{
        *
        ${
 arguments[3] = x
        }
      }
      @{
        *
        ${
 arguments[4] = y
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => callback
    type => function
    id => js.lang.callback
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Creates a function which throws an exception when called.
      }
      @{
        *
        ${
 this.method = ecma.lang.createAbstractFunction();
        }
      }
      @{
        ${
 var str = ecma.util.pad(src, width);
        }
        ${

        }
      }
    }
    name => createAbstractFunction
    type => function
    id => js.lang.createAbstractFunction
    depth => 3
  }
  %{
    props => %{
      param => @{
        func <Function> to call back
        scope <Scope> to apply the callback
        args <Array> (optional) arguments which will be passed *after* the caller's.
      }
    }
    content => @{
      @{
        *
        Create a callback function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 func <Function> to call back
        }
      }
      @{
        *
        ${
 scope <Scope> to apply the callback
        }
      }
      @{
        *
        ${
 args <Array> (optional) arguments which will be passed *after* the caller's.
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var cb = ecma.lang.createCallback(this.refresh, this, [arg1, arg2]);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Note that window.setTimeout and window.setInterval pass the number of
      }
      @{
        *
        seconds late as the first argument.  To avoid this, use L<ecma.dom.setTimeout>
      }
      @{
        *
        and L<ecma.dom.setInterval>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createCallback
    type => function
    id => js.lang.createCallback
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a callback array.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 [func, scope, args] = ecma.lang.createCallbackArray(func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This method unwraps C<func> when it is already a callback array.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        See L<ecma.lang.callback>
      }
      @{
        current step.
        ${

        }
      }
    }
    name => createCallbackArray
    type => function
    id => js.lang.createCallbackArray
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Wrapper which calls the class' construct function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        A class' constructor function should not be a member of its prototype
      }
      @{
        *
        if you want it to be a base-class of a multiply-inhertited sub-class.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 CAlpha = ecma.lang.createConstructor();
        }
      }
      @{
        *
        ${
 CAlpha.prototype = {
        }
      }
      @{
        *
        ${
   construct: function (arg1) {
        }
      }
      @{
        *
        ${
     this.value = arg1;
        }
      }
      @{
        *
        ${
   \},
        }
      }
      @{
        *
        ${
   toString: function () {
        }
      }
      @{
        *
        ${
     return '[A] ' + this.value;
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 CBravo = ecma.lang.createConstructor(CAlpha);
        }
      }
      @{
        *
        ${
 CBravo.prototype.toString = function () {
        }
      }
      @{
        *
        ${
   return '[B] ' + this.value;
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createConstructor
    type => function
    id => js.lang.createConstructor
    depth => 3
  }
  %{
    props => %{
      param => @{
        klass <Function> Constructor function
        args <Array> Arguments
      }
    }
    content => @{
      @{
        *
        Creates a new instance of the specified class.  Behaves as C<apply> does,
      }
      @{
        *
        i.e., passing the C<args> array as arguments to the class constructor.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 klass <Function> Constructor function
        }
      }
      @{
        *
        ${
 args <Array> Arguments
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function Point2D (x, y) {
        }
      }
      @{
        *
        ${
   this.x = x;
        }
      }
      @{
        *
        ${
   this.y = y;
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function Point3D (x, y, z) {
        }
      }
      @{
        *
        ${
   this.x = x;
        }
      }
      @{
        *
        ${
   this.y = y;
        }
      }
      @{
        *
        ${
   this.z = z;
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function createPoint () {
        }
      }
      @{
        *
        ${
   if (arguments.length == 3)
        }
      }
      @{
        *
        ${
     return ecma.lang.createObject(Point3D, arguments);
        }
      }
      @{
        *
        ${
   if (arguments.length == 2)
        }
      }
      @{
        *
        ${
     return ecma.lang.createObject(Point2D, arguments);
        }
      }
      @{
        *
        ${
   throw new Exception();
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createObject
    type => function
    id => js.lang.createObject
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return an instance of a proxied constructor.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Allows one to use the basic ECMAScript inheritance model without
      }
      @{
        *
        calling the base class' constructor.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var BaseClass = function () { ... };
        }
      }
      @{
        *
        ${
 var MyClass = function () { ... };
        }
      }
      @{
        *
        ${
 MyClass.prototype = js.lang.createPrototype(BaseClass);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Also implements a multiple inheritence model.  With single inheritence,
      }
      @{
        *
        the C<instanceof> operator will work as expected.  With multiple
      }
      @{
        *
        inhertience, only the first base class is recognized.  As such,
      }
      @{
        *
        L<ecma.util.isa> must be used to intergate all bases.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var BaseClass1 = function () { ... };
        }
      }
      @{
        *
        ${
 var BaseClass2 = function () { ... };
        }
      }
      @{
        *
        ${
 var MyClass = function () { ... };
        }
      }
      @{
        *
        ${
 MyClass.prototype = js.lang.createPrototype(BaseClass1, BaseClass2);
        }
      }
      @{
        *
        ${
 var myObj = new MyClass();
        }
      }
      @{
        *
        ${
 ecma.lang.assert(myObj instanceof BaseClass1);        // Okay
        }
      }
      @{
        *
        ${
 ecma.lang.assert(myObj instanceof BaseClass2);        // Wrong
        }
      }
      @{
        *
        ${
 ecma.lang.assert(ecma.util.isa(myObj, BaseClass2));   // Correct
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When a duplicate base class is detected it will be ignored. For instance:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var A = function () {};
        }
      }
      @{
        *
        ${
 A.prototype = ecma.lang.createPrototype();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var B = function () {};
        }
      }
      @{
        *
        ${
 B.prototype = ecma.lang.createPrototype(A);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var C = function () {};
        }
      }
      @{
        *
        ${
 C.prototype = ecma.lang.createPrototype(B, A);  // A is ignored
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        However this only works when the methods have not yet been overlayed on to
      }
      @{
        *
        the final prototype. For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var C = function () {};
        }
      }
      @{
        *
        ${
 C.prototype = ecma.lang.createPrototype(A, B);  // A is NOT ignored
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        In the above A is first integrated, then B comes along. However B is
      }
      @{
        *
        already a composite which includes A's methods. TODO Scan B to see if it 
      }
      @{
        *
        isa A, then prune A if so.
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createPrototype
    type => function
    id => js.lang.createPrototype
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        ${
 real = {
        }
      }
      @{
        *
        ${
   'invoke': function () { },
        }
      }
      @{
        *
        ${
   'toString': function () { }
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 facade = {};
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Create entries in facade which forward to real
        }
      }
      @{
        *
        ${
 js.lang.createProxyFunction('invoke', facade, real);
        }
      }
      @{
        *
        ${
 js.lang.createProxyFunction('toString', facade, real);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Or, pass all function names at once
        }
      }
      @{
        *
        ${
 js.lang.createProxyFunction(['invoke', 'toString'], facade, real);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createProxyFunction
    type => function
    id => js.lang.createProxyFunction
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Test a given object for the presence of member functions. This is
      }
      @{
        *
        related to supporting an interface.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param obj <Object> That which is to be queried
        }
      }
      @{
        *
        ${
 @param methods <Array> Names of members which must be functions
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var obj = new Object();
        }
      }
      @{
        *
        ${
 ecma.lang.hasMethods(obj, ['toString', 'hasOwnProperty']); // returns true
        }
      }
      @{
        *
        ${
 ecma.lang.hasMethods(obj, ['apply', 'toString']); // returns false
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hasMethods
    type => function
    id => js.lang.hasMethods
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        References:
      }
      @{
        *
        ${
 http://unixpapa.com/js/key.html
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => local
    type => namespace
    id => js.local
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => lsn
    type => namespace
    id => js.lsn
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Base class for extending an INPUT control with a drop-down list.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Create a class MyClass which extends ecma.lsn.ComboBox
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var cbox = new MyClass();
        }
      }
      @{
        *
        ${
 cbox.attach('ctrl1'); // where ctrl1 is the ID of an input control
        }
      }
      @{
        *
        ${
 
        }
      }
      @{
        *
        Later on, you may want to call:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 cbox.show(); // manually open the drop-down
        }
      }
      @{
        *
        ${
 cbox.hide(); // manually close the drop-down
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => ComboBox
    type => class
    id => js.lsn.ComboBox
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Attach to an input control.
      }
      @{
        *
        ${
 cbox.attach('ctrl1');
        }
      }
      @{
        *
        This will append an IMG element to the dom which functions as the drop-
      }
      @{
        *
        down button for the control.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => attach
    type => function
    id => js.lsn.ComboBox.attach
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Hide the drop-down.
      }
      @{
        *
        ${
 cbox.hide();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hide
    type => function
    id => js.lsn.ComboBox.hide
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Show the drop-down.
      }
      @{
        *
        ${
 cbox.show();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => show
    type => function
    id => js.lsn.ComboBox.show
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Dialog
    type => class
    id => js.lsn.Dialog
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => beforeShow
    type => function
    id => js.lsn.Dialog.beforeShow
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => onHide
    type => function
    id => js.lsn.Dialog.onHide
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Make an element a handle for dragging.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var dh = new ecma.lsn.DragHandle(elem);
        }
      }
      @{
        *
        ${
 var dh = new ecma.lsn.DragHandle(elem, opts);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The C<opt> object may contain:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 opts.threshold      Pixels of dragging required to start
        }
      }
      @{
        *
        ${
 opts.onMouseDown    Callback
        }
      }
      @{
        *
        ${
 opts.onMouseUp      Callback
        }
      }
      @{
        *
        ${
 opts.onMouseMove    Callback
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The callback functions are passed two arguments, the C<event> and the 
      }
      @{
        *
        C<this> pointer.  For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 new js.lsn.DragHandle('elem-id', {
        }
      }
      @{
        *
        ${
   'onMouseMove': function (event, dh) {
        }
      }
      @{
        *
        ${
     js.console.log(dh.delta_x, dh.delta_y);
        }
      }
      @{
        *
        ${
     event.stop();
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \};
        }
      }
      @{
        *
        ${

        }
      }
    }
    name => DragHandle
    type => class
    id => js.lsn.DragHandle
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Difference between original and current mouse X position
      }
    }
    name => delta_x
    type => member
    id => js.lsn.DragHandle.delta_x
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Difference between original and current mouse Y position
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => delta_y
    type => member
    id => js.lsn.DragHandle.delta_y
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Original mouse X position
      }
    }
    name => orig_mx
    type => member
    id => js.lsn.DragHandle.orig_mx
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Original mouse Y position
      }
    }
    name => orig_my
    type => member
    id => js.lsn.DragHandle.orig_my
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Reset the internal tracking data.
      }
      @{
        *
        ${
 dh.reset();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => reset
    type => function
    id => js.lsn.DragHandle.reset
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        A layer mask over the viewport.
      }
      @{
        *
        ${
 var mask = new ecma.lsn.Mask();
        }
      }
      @{
        *
        ${
 var mask = new ecma.lsn.Mask(optStyle);
        }
      }
      @{
        *
        The C<optStyle> object is passed to L<ecma.dom.createElement> as the style
      }
      @{
        *
        for the DIV which is the mask.  The actual DIV element which is the mask 
      }
      @{
        *
        is created here as the public member C<ui>.  You may access it after function
      }
      @{
        *
        is complete:
      }
      @{
        *
        ${
 var mask = new ecma.lsn.Mask();
        }
      }
      @{
        *
        ${
 var div = mask.ui;
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Mask
    type => class
    id => js.lsn.Mask
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Hide the mask.
      }
      @{
        *
        ${
 mask.hide();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hide
    type => function
    id => js.lsn.Mask.hide
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Resize the mask to match cover the viewport.  This function is called
      }
      @{
        *
        internally when needed, but available if you need it.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 mask.resize();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This function does not work well when the window becomes a smaller size.
      }
      @{
        *
        Reason being, this mask itself may be preventing the pageX and pageY
      }
      @{
        *
        dimensions from returning the true size of the page.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => resize
    type => function
    id => js.lsn.Mask.resize
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Show the mask.
      }
      @{
        *
        ${
 mask.show();
        }
      }
      @{
        *
        ${
 mask.show(optStyle);
        }
      }
      @{
        *
        The C<optStyle> object contains styles which are applied to the mask
      }
      @{
        *
        when it is shown, overriding any set in the constructor.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => show
    type => function
    id => js.lsn.Mask.show
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Provides common events and methods for javascript web pages.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 // Before Document onLoad
        }
      }
      @{
        *
        ${
 var p = new Page();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Action Listeners
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 p.addActionListener(name, cb);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 name    Action name L<1>
        }
      }
      @{
        *
        ${
 cb      Callback L<2>
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> Actions
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 Name          Called When
        }
      }
      @{
        *
        ${
 ------------- ------------------------------------------------------------
        }
      }
      @{
        *
        ${
 onPageLoad        DOM load   
        }
      }
      @{
        *
        ${
 onPageResize      Window resize
        }
      }
      @{
        *
        ${
 onPageScroll      Window scroll
        }
      }
      @{
        *
        ${
 onPageUnload      Window unload
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> Callback API
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function (action, event);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Page
    type => class
    id => js.lsn.Page
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Wrapper class for window events.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 new PageLayout();
        }
      }
      @{
        *
        ${
 new PageLayout(opts);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 opts.load     Window onLoad event callback
        }
      }
      @{
        *
        ${
 opts.resize   Window onResize event callback
        }
      }
      @{
        *
        ${
 opts.unload   Window onUnload event callback
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The default load function calls resize so you don't have to.  This class
      }
      @{
        *
        is intended to be used simply as:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 new PageLayout({resize: function (event) {
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   // resize page elements
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 \});
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => PageLayout
    type => class
    id => js.lsn.PageLayout
    depth => 3
  }
  %{
    props => %{
      base => @{
        ecma.http.Request
      }
    }
    content => @{
      @{
        *
        ${
 ecma.http.Request
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Request
    type => class
    id => js.lsn.Request
    depth => 3
  }
  %{
    props => %{
      param => @{
        uri       <String>    Location of widget resource
        options   <Object>    Options
      }
    }
    content => @{
      @{
        *
        A response comprised of HTML, JS and CSS which is not a full document.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 uri       <String>    Location of widget resource
        }
      }
      @{
        *
        ${
 options   <Object>    Options
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where C<options> are:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 container       <HTMLElement> Append the widget to this container.
        }
      }
      @{
        *
        ${
                               Default is the document body.
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 refetch         <boolean>   When the widget is shown after it has been
        }
      }
      @{
        *
        ${
                             hidden, it will be refetched from the server
        }
      }
      @{
        *
        ${
                             if this is true.  Default is false.
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var w = new js.lsn.Widget('/my.html', {container: 'mydiv'});
        }
      }
      @{
        *
        ${
 w.show({param:'value'});
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Widget
    type => class
    id => js.lsn.Widget
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => lsn.auth
    type => namespace
    id => js.lsn.auth
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => basic
    type => function
    id => js.lsn.auth.basic
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => setAuthToken
    type => function
    id => js.lsn.auth.setAuthToken
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => lsn.forms
    type => namespace
    id => js.lsn.forms
    depth => 3
  }
  %{
    props => %{
      param => @{
        def <ecma.data.HashList> Form defintion L<1>
        vals <ecma.data.HashList> Optional form values (name:value pairs)
      }
    }
    content => @{
      @{
        *
        Create an HTML form according to the provided definition.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var form = new ecma.lsn.forms.Form(def, vals);
        }
      }
      @{
        *
        ${
 var formElem = form.getRootElement();
        }
      }
      @{
        *
        ${
 // Append formElem to where the form should appear
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 def <ecma.data.HashList> Form defintion L<1>
        }
      }
      @{
        *
        ${
 vals <ecma.data.HashList> Optional form values (name:value pairs)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<1> Form defintion format
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 action \=> /where/to/post              Optional, L<2>
        }
      }
      @{
        *
        ${
 submit \=> Submit                      Optional, L<3>
        }
      }
      @{
        *
        ${
 fieldsets \=> \@{
        }
      }
      @{
        *
        ${
   \%{
        }
      }
      @{
        *
        ${
     heading \=> Heading                Optional
        }
      }
      @{
        *
        ${
     fields \=> \%{
        }
      }
      @{
        *
        ${
       name \=> \%{                      L<4>
        }
      }
      @{
        *
        ${
         label \=> Label                Optional
        }
      }
      @{
        *
        ${
         type \=> type                  L<5>
        }
      }
      @{
        *
        ${
         value \=> default-value
        }
      }
      @{
        *
        ${
         max-length \=> number          for type=text
        }
      }
      @{
        *
        ${
       \}
        }
      }
      @{
        *
        ${
     \}
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<2> Form action
      }
      @{
        *
        ${

        }
      }
      @{
        *
        If no form action is provided, this class will dispatch a C<doSubmit>
      }
      @{
        *
        action.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<3> Submit-button text
      }
      @{
        *
        ${

        }
      }
      @{
        *
        If no submit-button text is provided, no submit button will be created.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<4> Field C<name>s
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The field C<name> is the datum key used when creating a hash list of form
      }
      @{
        *
        values.  Meaning that if you have several fields, with these ids:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 billingAddress/line1
        }
      }
      @{
        *
        ${
 billingAddress/line2
        }
      }
      @{
        *
        ${
 shippingAddress/line1
        }
      }
      @{
        *
        ${
 shippingAddress/line2
        }
      }
      @{
        *
        ${
 some/other/thing
        }
      }
      @{
        *
        ${
 other/stuff
        }
      }
      @{
        *
        ${
 other/stuff
        }
      }
      @{
        *
        ${
 other/stuff
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Then the paramaters are submitted as the structured object:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 billingAddress \=> \%{
        }
      }
      @{
        *
        ${
   line1 \=> its-value
        }
      }
      @{
        *
        ${
   line2 \=> its-value
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
 shippingAddress \=> \%{
        }
      }
      @{
        *
        ${
   line1 \=> its-value
        }
      }
      @{
        *
        ${
   line2 \=> its-value
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
 some \=> \%{
        }
      }
      @{
        *
        ${
   other \=> \%{
        }
      }
      @{
        *
        ${
     thing \=> its-value
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
 other \=> \%{
        }
      }
      @{
        *
        ${
   stuff \=> \@{
        }
      }
      @{
        *
        ${
     first-value
        }
      }
      @{
        *
        ${
     second-value
        }
      }
      @{
        *
        ${
     third-value
        }
      }
      @{
        *
        ${
   \}
        }
      }
      @{
        *
        ${
 \}
        }
      }
      @{
        *
        ${
   
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        N<5> Field types
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 hidden        INPUT TYPE="hidden"
        }
      }
      @{
        *
        ${
 text          INPUT TYPE="text"
        }
      }
      @{
        *
        ${
 textarea      TEXTAREA
        }
      }
      @{
        *
        ${
 date          INPUT TYPE="text"
        }
      }
      @{
        *
        ${
 password      INPUT TYPE="password"
        }
      }
      @{
        *
        ${
 
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Form
    type => class
    id => js.lsn.forms.Form
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Convenience method for hiding the generic page mask.
      }
      @{
        *
        ${
 ecma.lsn.hideMask();
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => hideMask
    type => function
    id => js.lsn.hideMask
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Insert CSS and JS specified in response to an L<ecma.lsn.Request>
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => includeHead
    type => function
    id => js.lsn.includeHead
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => includeHeadCSS
    type => function
    id => js.lsn.includeHeadCSS
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        SCRIPT elements added to the DOM are not controlled by the browser's
      }
      @{
        *
        document parser.  Thus the load order is not maintained.  This routine
      }
      @{
        *
        will load SCRIPT elements in order, waiting for each to complete
      }
      @{
        *
        before proceeding to the next.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        When all SCRIPT elements have been loaded the optional callback parameter
      }
      @{
        *
        is run under the scope of the caller parameter.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => includeHeadJS
    type => function
    id => js.lsn.includeHeadJS
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => initDialogStyles
    type => function
    id => js.lsn.initDialogStyles
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => lsn.layout
    type => namespace
    id => js.lsn.layout
    depth => 3
  }
  %{
    props => %{
      param => @{
        type ROW|BOX|COLUMN
        name <String>
        size [Number]
        options [Object]
      }
    }
    content => @{
      @{
        *
        ${
 type ROW|BOX|COLUMN
        }
      }
      @{
        *
        ${
 name <String>
        }
      }
      @{
        *
        ${
 size [Number]
        }
      }
      @{
        *
        ${
 options [Object]
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Options
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 style_by:     'class'; (Default) Style-sheet rules are specified as .name
        }
      }
      @{
        *
        ${
               'id'; Style-sheet rules are specified as #name
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 structure:    'flat'; (Default) Origin is viewport
        }
      }
      @{
        *
        ${
               'nested'; Origin is the containing area
        }
      }
      @{
        *
        ${
               'wrap';   No origin, layout is for width or height only
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 gap:          [top,right,bottom,left]
        }
      }
      @{
        *
        ${
               [top,right+left,bottom]
        }
      }
      @{
        *
        ${
               [top+bottom,right+left]
        }
      }
      @{
        *
        ${
               [top+right+bottom+left]
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Area
    type => class
    id => js.lsn.layout.Area
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getCascadingOptions
    type => function
    id => js.lsn.layout.Area.getCascadingOptions
    depth => 5
  }
  %{
    props => %{
      params => @{
        ...
      }
      param => @{
        symbol
        ruleName
        region
      }
    }
    content => @{
      @{
        *
        ${
 symbol
        }
      }
      @{
        *
        ${
 ruleName
        }
      }
      @{
        *
        ${
 region
        }
      }
      @{
        *
        ${
 ...
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => log
    type => function
    id => js.lsn.layout.Area.log
    depth => 5
  }
  %{
    props => %{
      param => @{
        spec <Array>
      }
    }
    content => @{
      @{
        *
        ${
 spec <Array>
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => parseGap
    type => function
    id => js.lsn.layout.Area.parseGap
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Layout
    type => class
    id => js.lsn.layout.Layout
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => ViewportLayout
    type => class
    id => js.lsn.layout.ViewportLayout
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Required 'wrapper' option which specifies wrapper
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => WrapperLayout
    type => class
    id => js.lsn.layout.WrapperLayout
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Convenience method for displaying a generic page mask.
      }
      @{
        *
        ${
 ecma.lsn.showMask();
        }
      }
      @{
        *
        ${
 ecma.lsn.showMask(optStyle);
        }
      }
      @{
        *
        See L<ecma.lsn.Mask.show> for more information.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => showMask
    type => function
    id => js.lsn.showMask
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => lsn.ui
    type => namespace
    id => js.lsn.ui
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Base
    type => class
    id => js.lsn.ui.Base
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => zIndexAlloc
    type => function
    id => js.lsn.ui.Base.zIndexAlloc
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => zIndexFree
    type => function
    id => js.lsn.ui.Base.zIndexFree
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Implementation for HTML dialogs.
      }
      @{
        *
        ${

        }
      }
      @{
        =
        Action Interface
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The below actions also invoke derived class methods of the same name.  By
      }
      @{
        *
        default, actions are synchronous to allow for asynchronous actions (such
      }
      @{
        *
        as effects and XHR loading) to complete.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   onDialogLoad      When .show() is called the first time.
        }
      }
      @{
        *
        ${
   onDialogShow      When .show() is invoked (and before anything happens)
        }
      }
      @{
        *
        ${
   onDialogAttach    After the elements have been added to the document
        }
      }
      @{
        *
        ${
   onDialogReady     After the dialog appears (asynchronous callbacks)
        }
      }
      @{
        *
        ${
   onDialogHide      When .hide() is invoked (and before anything happens)
        }
      }
      @{
        *
        ${
   onDialogDetach    After the elements have been removed from the document
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   Example:
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     var dlg = new ecma.lsn.ui.Dialog();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     dlg.show();     // onDialogShow
        }
      }
      @{
        *
        ${
                     // onDialogAttach
        }
      }
      @{
        *
        ${
                     //  - The dialog is centered
        }
      }
      @{
        *
        ${
                     //  - The appear affect is applied
        }
      }
      @{
        *
        ${
                     // onDialogReady
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     dlg.hide();     // onDialogHide
        }
      }
      @{
        *
        ${
                     //  - The disappear affect is applied
        }
      }
      @{
        *
        ${
                     // onDialogDetach
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Dialog
    type => class
    id => js.lsn.ui.Dialog
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getElementById
    type => function
    id => js.lsn.ui.Dialog.getElementById
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Display an underlying mask which closes the dialog when clicked.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => makeMasked
    type => function
    id => js.lsn.ui.Dialog.makeMasked
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Display an underlying modal mask when the dialog is shown.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => makeModal
    type => function
    id => js.lsn.ui.Dialog.makeModal
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => LoginDialog
    type => class
    id => js.lsn.ui.LoginDialog
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => hide
    type => function
    id => js.lsn.ui.LoginDialog.hide
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => show
    type => function
    id => js.lsn.ui.LoginDialog.show
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
      @{
        =
        Action Interface
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The below actions also invoke derived class methods of the same name and
      }
      @{
        *
        are synchronous.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   onMaskLoad      When .show() is called the first time
        }
      }
      @{
        *
        ${
   onMaskShow      When .show() is invoked (and before anything happens)
        }
      }
      @{
        *
        ${
   onMaskAttach    After the elements have been added to the document
        }
      }
      @{
        *
        ${
   onMaskReady     After the mask appears (asynchronous callbacks)
        }
      }
      @{
        *
        ${
   onMaskHide      When .hide() is invoked (and before anything happens)
        }
      }
      @{
        *
        ${
   onMaskDetach    After the elements have been removed from the document
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
   Example:
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     var mask = new ecma.lsn.ui.Mask();
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     mask.show();    // onMaskLoad (iff this is the first time)
        }
      }
      @{
        *
        ${
                     // onMaskShow
        }
      }
      @{
        *
        ${
                     // onMaskAttach
        }
      }
      @{
        *
        ${
                     // onMaskReady
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
     mask.hide();    // onMaskHide
        }
      }
      @{
        *
        ${
                     // onMaskDetach
        }
      }
      @{
        *
        ${

        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => Mask - An element which covers the entire page.
    type => class
    id => js.lsn.ui.Mask - An element which covers the entire page.
    depth => 5
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Prompt
    type => class
    id => js.lsn.ui.Prompt
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => zIndex
    type => function
    id => js.lsn.zIndex
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => zIndexAlloc
    type => function
    id => js.lsn.zIndexAlloc
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => zIndexFree
    type => function
    id => js.lsn.zIndexFree
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => platform
    type => namespace
    id => js.platform
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
    }
    name => Info
    type => class
    id => js.platform.Info
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => searchString
    type => function
    id => js.platform.Info.searchString
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => searchVersion
    type => function
    id => js.platform.Info.searchVersion
    depth => 4
  }
  %{
    props => %{
    }
    content => @{
    }
    name => getInfo
    type => function
    id => js.platform.getInfo
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isIE
    type => structure
    id => js.platform.isIE
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isIE8
    type => structure
    id => js.platform.isIE8
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Threading model.
      }
      @{
        *
        ${

        }
      }
      @{
        \#
        This creates an unwanted dependency on L<ecma.dom.setTimeout> because the
      }
      @{
        \#
        we need to surpress the number-of-seconds-late argument from being inserted
      }
      @{
        \#
        into the argument stack.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Maybe not the best idea in the world, however the intention is to give the
      }
      @{
        *
        programmer the function of creating and managing threads.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Currently this uses the C<setTimeout> function of the window object.  This
      }
      @{
        *
        is obviously a browser-based solution.  However, the understanding is that
      }
      @{
        *
        the window object is the browser's "platform" and that any "platform" will
      }
      @{
        *
        implement a C<setTimeout> function.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        TODO Determine if there is a better way to achieve this goal, if the
      }
      @{
        *
        C<setTimeout> presumption is valid, and research what it would take to 
      }
      @{
        *
        incorporate suport for other platforms.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => thread
    type => namespace
    id => js.thread
    depth => 2
  }
  %{
    props => %{
      param => @{
        func    <Function|Array> Callback function
        scope   <Object> Default scope (optional)
        args    <Array> Arguments (optional)
        excb    <Function> Exception handler (optional)
      }
    }
    content => @{
      @{
        *
        Spawn a new thread.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.thread.spawn(func);
        }
      }
      @{
        *
        ${
 ecma.thread.spawn(func, scope);
        }
      }
      @{
        *
        ${
 ecma.thread.spawn(func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 func    <Function|Array> Callback function
        }
      }
      @{
        *
        ${
 scope   <Object> Default scope (optional)
        }
      }
      @{
        *
        ${
 args    <Array> Arguments (optional)
        }
      }
      @{
        *
        ${
 excb    <Function> Exception handler (optional)
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => spawn
    type => function
    id => js.thread.spawn
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Common functions for converting and formatting units.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => units
    type => namespace
    id => js.units
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return a human-readable size given a number of bytes.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 sz = ecma.units.bytesize(bytes);
        }
      }
      @{
        *
        ${
 sz = ecma.units.bytesize(bytes, digits);
        }
      }
      @{
        *
        ${
 sz = ecma.units.bytesize(bytes, digits, min);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 bytes   <Number>      The number of bytes to represent
        }
      }
      @{
        *
        ${
 digits  <Number>      Significant digits (default=2)
        }
      }
      @{
        *
        ${
 min     <Number>      Minimum representation size (default=ONE_KiB)
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => bytesize
    type => function
    id => js.units.bytesize
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Common utility functions.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => util
    type => namespace
    id => js.util
    depth => 2
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an Array comprised of Function.arguments elements.
      }
      @{
        *
        ${
 @param args arguments object
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => args
    type => function
    id => js.util.args
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Convert the hyphenated name to camel-cased.
      }
      @{
        *
        ${
 @param name to convert
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => asCamelCaseName
    type => function
    id => js.util.asCamelCaseName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Convert a camel-cased name to hypenated.
      }
      @{
        *
        ${
 @param name to convert
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => asHyphenatedName
    type => function
    id => js.util.asHyphenatedName
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Integer representation of the provided unkown
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param unk The unknown
        }
      }
      @{
        *
        ${
 @param gez true|false, only return a value greater-than or equal to zero
        }
      }
      @{
        *
        ${

        }
      }
      @{
        =
        NaN is returned as 0.
      }
      @{
        =
        When 'gez' is in effect, negative numbers are returned as 0.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => asInt
    type => function
    id => js.util.asInt
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Convenience method for overlaying properties into an empty object.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => clone
    type => function
    id => js.util.clone
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a 36-character hex identifier. For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 6ebeaca4-96df-b9d1-331f-c07fa13d7167
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => createGUID
    type => function
    id => js.util.createGUID
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => createUUID
    type => function
    id => js.util.createUUID
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return true unless the variable type is 'undefined'
      }
      @{
        *
        ${
 @param variable
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => defined
    type => function
    id => js.util.defined
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Evaluate a variable.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var href = evar('document.location.href');
        }
      }
      @{
        *
        ${
 var href = evar('this.location.href', document); // with scope
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Convenience method which eats the traversal exceptions which occur while
      }
      @{
        *
        accessing the value.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        This line:
      }
      @{
        *
        ${
   evar('document.documentElement.clientWidth');
        }
      }
      @{
        *
        is eqivalent to:
      }
      @{
        *
        ${
   document.documentElement ? this.doc.documentElement.clientWidth : undefined;
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => evar
    type => function
    id => js.util.evar
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return the first defined agument.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => firstDefined
    type => function
    id => js.util.firstDefined
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return an array of matching items.
      }
      @{
        *
        ${
 var result = grep (value, list);
        }
      }
      @{
        *
        ${
 var result = grep (function, list);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example using match function:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 function isPrime (num) { ... }
        }
      }
      @{
        *
        ${
 var primes =  grep (isPrime, [1, 2, 3, 4]);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example using match value:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var value =  grep ('abc', ['abc', 'def', 'ghi']);
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => grep
    type => function
    id => js.util.grep
    depth => 3
  }
  %{
    props => %{
      param => @{
        id    <String> Identifier prefix (and key)
        width <Number> Number width, zero padded (optional)
      }
    }
    content => @{
      @{
        *
        Produce an incremented identifier for a given prefix.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var id = ecma.util.incrementalId(prefix, width);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 id    <String> Identifier prefix (and key)
        }
      }
      @{
        *
        ${
 width <Number> Number width, zero padded (optional)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Identifiers begin at 1.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var id1 = ecma.util.incrementalId('foo');
        }
      }
      @{
        *
        ${
 var id2 = ecma.util.incrementalId('foo');
        }
      }
      @{
        *
        ${
 var id3 = ecma.util.incrementalId('foo', 3);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 foo1
        }
      }
      @{
        *
        ${
 foo2
        }
      }
      @{
        *
        ${
 foo003
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => incrementalId
    type => function
    id => js.util.incrementalId
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk <Any> The unknown
      }
    }
    content => @{
      @{
        *
        Is the unknown a pure JavaScript array?
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 isArray(unk)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk <Any> The unknown
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isArray
    type => function
    id => js.util.isArray
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk <Any> The unknown
      }
    }
    content => @{
      @{
        *
        Is the unknown an associative array?  Meaning an object which is not
      }
      @{
        *
        an array.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 isAssociative(unk)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk <Any> The unknown
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isAssociative
    type => function
    id => js.util.isAssociative
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk <Any> The unknown
      }
    }
    content => @{
      @{
        *
        Is the unknown a callback function which can be used by C<ecma.lang.callback>?
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 bool = ecma.util.isCallback(unk);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk <Any> The unknown
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isCallback
    type => function
    id => js.util.isCallback
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => isDefined
    type => function
    id => js.util.isDefined
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk <Any> The unknown
      }
    }
    content => @{
      @{
        *
        Is the unknown a JavaScript function?
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 bool = ecma.util.isFunction(unk);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk <Any> The unknown
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isFunction
    type => function
    id => js.util.isFunction
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk <Any> The unknown
      }
    }
    content => @{
      @{
        *
        Is the unknown a JavaScript object?  Note that arrays are objects.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 isObject(unk)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk <Any> The unknown
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isObject
    type => function
    id => js.util.isObject
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Is the unknown a string?
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isString
    type => function
    id => js.util.isString
    depth => 3
  }
  %{
    props => %{
      param => @{
        unk     <Any>           The unknown
        klass   <Function>      The constructor class
      }
    }
    content => @{
      @{
        *
        Is the unkown an instance of (or derived from) this class
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 isa(unk, klass);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 unk     <Any>           The unknown
        }
      }
      @{
        *
        ${
 klass   <Function>      The constructor class
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Objects with multiple inheritence created using the function
      }
      @{
        *
        L<ecma.lang.createMethods> will have a prototype member named
      }
      @{
        *
        C<__constructors__>, which will be inspected if it exists.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => isa
    type => function
    id => js.util.isa
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an array of the Object's keys.
      }
      @{
        *
        ${
 @param obj <Object>
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => keys
    type => function
    id => js.util.keys
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Recursively copy members of one object to another by key.
      }
      @{
        *
        ${
 @param dest object
        }
      }
      @{
        *
        ${
 @param src object
        }
      }
      @{
        *
        ${
 @param ... more sources
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var dest = {a:1};
        }
      }
      @{
        *
        ${
 overlay(dest, {b:2}, {c:3});
        }
      }
      @{
        *
        ${
 // dest is now {a:1, b:2, c:3}
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => overlay
    type => function
    id => js.util.overlay
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Return a padded string of the specified width.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var str = ecma.util.pad(src, width);
        }
      }
      @{
        *
        ${
 var str = ecma.util.pad(src, width, chr);
        }
      }
      @{
        *
        ${
 var str = ecma.util.pad(src, width, chr, rtl);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Where:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param src <String|Number> The source value to pad
        }
      }
      @{
        *
        ${
 @param width <Number> The desired width (1 < width < 100)
        }
      }
      @{
        *
        ${
 @param chr <String> The padding character (default is 0)
        }
      }
      @{
        *
        ${
 @param rtl <Boolean> Right-to-left? (default is false)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        If the source length is greater than the specified width, it is returned
      }
      @{
        *
        without modification.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.util.pad('a', 3);              // 00a
        }
      }
      @{
        *
        ${
 ecma.util.pad('a', 3, '-');         // --a
        }
      }
      @{
        *
        ${
 ecma.util.pad('a', 3, '-', true);   // a--
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => pad
    type => function
    id => js.util.pad
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create a 4-character hex identifier. For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 96df
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        See also L<rand8>
      }
      @{
        *
        See also L<createUUID>, aka L<createGUID>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => rand4
    type => function
    id => js.util.rand4
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an 8-character hex identifier. For example:
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 6ebeaca4
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        See also L<createUUID>, aka L<createGUID>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => rand8
    type => function
    id => js.util.rand8
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Produce a random identifier.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 var id = randomId(); // id is ~ 8234
        }
      }
      @{
        *
        ${
 var id = randomId('tbl_'); // id is ~ tbl_8234
        }
      }
      @{
        *
        ${
 var id = randomId('tbl_', 100); // id is ~ tbl_82 (no greater than 99)
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 @param prefix
        }
      }
      @{
        *
        ${
 @param multiplier (default 100,000)
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => randomId
    type => function
    id => js.util.randomId
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Step carefully over each item in an array, applying the callback.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        ${
 ecma.util.step(arr, func);
        }
      }
      @{
        *
        ${
 ecma.util.step(arr, func, scope);
        }
      }
      @{
        *
        ${
 ecma.util.step(arr, func, scope, args);
        }
      }
      @{
        *
        ${

        }
      }
      @{
        *
        The first parameter passed to C<func> is always the array item of the
      }
      @{
        *
        current step.
      }
      @{
        *
        ${

        }
      }
      @{
        *
        Exceptions which are thrown by C<func> are caught and stored in an array.
      }
      @{
        *
        After all items have been stepped through, a L<ecma.error.Multiple>
      }
      @{
        *
        exception is thrown if necessary.  This "safe-stepping" is the purpose
      }
      @{
        *
        of this function.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => step
    type => function
    id => js.util.step
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Export variables into the given namespace.
      }
      @{
        *
        ${
 ecma.util.use(object, object);
        }
      }
      @{
        *
        For example:
      }
      @{
        *
        ${
 ecma.util.use(this, ecma.dom.constants);
        }
      }
      @{
        *
        Would make the L<ecma.dom.constants> available as C<this.____>.
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => use
    type => function
    id => js.util.use
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
      @{
        *
        Create an array of the Object's values.
      }
      @{
        *
        ${
 @param obj <Object>
        }
      }
      @{
        ${

        }
        ${

        }
      }
    }
    name => values
    type => function
    id => js.util.values
    depth => 3
  }
  %{
    props => %{
    }
    content => @{
    }
    name => window
    type => member
    id => js.window
    depth => 2
  }
}